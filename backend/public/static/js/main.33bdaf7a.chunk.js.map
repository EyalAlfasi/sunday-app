{"version":3,"sources":["services/socketService.js","services/httpService.js","services/utilService.js","services/userService.js","store/actions/userAction.js","services/boardService.js","store/actions/boardAction.js","assets/img/sunday-logo.svg","cmps/HomeHeader.jsx","cmps/Login.jsx","cmps/SignUp.jsx","assets/img/sunday-icon.svg","cmps/user/UserNotifications.jsx","cmps/MainSideBar.jsx","cmps/BoardSearch.jsx","cmps/ConfirmModal.jsx","cmps/BoardSideBarItem.jsx","cmps/BoardSideBar.jsx","cmps/DatePicker.jsx","cmps/EditableElement.jsx","cmps/Colors.jsx","cmps/LabelMenu.jsx","assets/img/ChatBubble.jsx","cmps/TaskMembersModal.jsx","cmps/ProgressBar.jsx","cmps/CardPreview.jsx","cmps/GroupPreview.jsx","cmps/FilterOptions.jsx","cmps/BoardFilter.jsx","cmps/BoardMembers.jsx","cmps/BoardActivities.jsx","cmps/BoardHeader.jsx","cmps/DashBoard.jsx","cmps/BoardPreview.jsx","services/cloudinary-service.js","cmps/CardUpdates.jsx","pages/BoardApp.jsx","assets/img/undrawtask.svg","pages/Home.jsx","cmps/user/GeneralUserInfo.jsx","cmps/user/UpdateProfile.jsx","pages/user/UserProfile.jsx","App.jsx","store/reducers/userReducer.js","store/reducers/boardReducer.js","store/store.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["socketService","socket","setup","io","on","eventName","cb","off","emit","data","terminate","createSocketService","window","BASE_URL","axios","Axios","create","withCredentials","httpService","endpoint","ajax","a","method","url","res","response","status","location","assign","utilService","delay","ms","Promise","resolve","setTimeout","getRandomInt","makeId","length","txt","possible","i","charAt","Math","floor","random","getNameInitials","name","split","map","word","join","toUpperCase","getRandomPassword","pass","types","counter","currType","randomChar","getNameOfMonth","month","min","max","ceil","userService","login","logout","signup","getUsers","queryStr","getUserById","remove","userId","update","getLoggedinUser","updateNotifications","cleanNotifications","updateReadNotifications","memberToUpdate","notifications","forEach","notification","isRead","user","_id","updatedUser","_saveLocalUser","userCred","Error","sessionStorage","clear","setItem","JSON","stringify","parse","getItem","member","notificationTxt","id","createdAt","Date","now","byMember","fullname","imgUrl","memberToAdd","setMsg","msg","dispatch","action","type","checkLogin","credentials","logOut","boards","board","updateUserNotifications","boardService","query","removeBoard","getBoardById","addCard","addBoard","addGroup","deleteCard","getBoardIdByIdx","boardIdx","changeBoardTitle","changeCardTitle","changeGroupTitle","updateTaskMembers","memberId","sign","cardToUpdate","groupId","cards","activityText","boardToUpdate","groupToUpdate","_findGroupById","members","find","title","card","filter","activity","_createBoardActivity","activities","groups","group","err","changeCardDates","changeCardLabels","changeGroupColor","removeGroup","changeBoardMemebrs","memberData","membersToRemove","newMembers","changeGroupIdx","changeCardIdx","sortByTitle","groupsToSort","sort","group1","group2","toLowerCase","sortByDate","sortCardByDate","cardsToSort","card1","card2","card1Sort","card2Sort","dueDate","endDate","startDate","getTime","addCardLabel","updateActivities","isClear","deepSearchByKey","object","originalKey","matches","Array","isArray","arrayItem","Object","keys","key","hasOwnProperty","obj","push","getKeyById","source","target","sourceSet","Set","findTarget","has","add","value","addCardUpdate","boardId","filterBy","boardTitle","boardToAdd","createdBy","_createDefaultGroup","cardTitle","_createCard","newGroup","cardId","newTitle","color","style","result","destination","newGroups","idx","index","groupTitle","prevTitle","label","labelType","text","cardUpdate","updates","unshift","groupsToUpdate","labelGroup","console","log","dates","priority","statuses","priorities","loadBoards","getBoardsByUserId","targetValue","_HomeHeader","state","isNavOpen","isScrolled","scrollTop","handleScroll","excludedRoutes","scrollY","indexOf","props","pathname","document","querySelector","className","toggleMobileNav","setState","addEventListener","this","removeEventListener","ref","scrollRef","onScroll","to","src","sunday","alt","onClick","activeClassName","username","password","path","history","Component","mapDispatchToProps","HomeHeader","withRouter","connect","userReducer","_Login","loggedinUser","loginCred","loginHandleChange","ev","prevState","doLogin","preventDefault","onSubmit","TextField","margin","required","placeholder","autoFocus","onChange","Login","boardReducer","_SignUp","signupCred","email","confirm","isShowPassword","onSignUp","onTogglePassword","validate","values","errors","test","onGetRandomPassword","inputType","enableReinitialize","initialValues","autoComplete","as","Visibility","VisibilityOff","SignUp","useStyles","makeStyles","theme","typography","padding","spacing","UserNotifications","onCleanNotifications","onUpdateNotifications","React","useState","anchorEl","setAnchorEl","open","Boolean","undefined","data-tip","data-for","aria-describedby","event","currentTarget","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","moment","from","place","effect","MainSideBar","isShowUserNotification","onToggleUserNotifications","onLogOut","sundayIcon","BoardSearch","handelChange","onSetFilter","ConfirmModal","mounted","arg","CSSTransition","in","classNames","timeout","onExited","close","stopPropagation","Button","delete","variant","startIcon","BoardSideBarItem","onDeleteBoard","isDelete","setIsDelete","BoardSideBar","isAddBoard","onInputChange","onAddBoard","toggleEditBoard","DatePicker","focusedInput","handleChange","_d","changeDates","prevProps","closeDatePicker","isOutsideRange","onDatesChange","hideKeyboardShortcutsPanel","onFocusChange","EditableElement","children","isEdit","innerText","checkKey","onChangeTitle","onKeyDown","onBlur","contentEditable","suppressContentEditableWarning","spellCheck","onInput","Colors","changeColor","onChangeColor","backgroundColor","LabelMenu","currLabel","isOpen","isAddLabelOpen","isColorPalletteOpen","showAddLabelError","newLabel","toggleMenu","toggleAddNewLabel","toggleAddLabelError","setCurrLabel","onSaveLabel","labelName","setNewLabelColor","addLabel","onAddLabel","handleInput","labels","enableAdding","ClickAwayListener","onClickAway","ChatBubble","enableBackground","height","viewBox","width","xmlns","d","TaskMembersModal","boardMembers","cardMembers","changeTaskMembers","onCloseModal","ProgressBar","checkDueDate","start","today","end","timePassed","abs","round","range","groupColor","onOpenPicker","startMonth","getMonth","startDay","getDate","startDateForDisplay","endMonth","endDay","endDateForDisplay","dateRange","_CardPreview","isShowMembers","isShowDate","loggedInUser","onShowConfirmModal","onDeleteCard","toggleMembersModal","checkWorkingDays","days","diff","boardMember","cardMembersForDisplay","slice","draggableId","provided","snapshot","draggableProps","dragHandleProps","innerRef","cardToDelete","userToUpdate","CardPreview","GroupPreview","isMenuShown","isMenuOnHover","isShowColors","sortGroupBy","isShowSortOptions","isSortActive","isShowSortModal","onAddCard","replace","onChangeGroupTitle","onToggleMenu","toggleColorPallette","toggleMenuHover","toggleValue","onShowMemuOption","onSetGroupSort","sortBy","onToggleMenuSort","getGroupForDisplay","onDrag","copyGroup","onChangeGroupColor","onRemoveGroup","statusCount","countStatus","onMouseEnter","onMouseLeave","border","MenuList","MenuItem","ListItemIcon","cursor","droppableId","isCombineEnabled","droppableProps","cardColor","count","background","reduce","acc","FilterOptions","onSetFilterLabels","content","isSelect","substring","BoardFilter","membersId","statusesForDisplay","priorityForDisplay","isShowMenuFilter","isMobileFiltersOpen","cleanInput","copyFilter","onCloseFilterMenu","includes","newLabels","copyStatusForDispaly","copyPriorityForDisplay","onGetMember","newMmbers","toggleMobileFilters","setStatuses","currGroup","boardFilter","Fragment","_BoardMembers","users","usersNotInBoard","onChangeBoardMemebrs","updatedUsers","onCloseModalMembers","BoardMembers","BoardActivities","activityFilterText","BoardHeader","onAddGroup","changeBoardView","isShowBoardMember","setIsShowBoardMember","isShowActivities","setIsShowActivities","setActivityFilterText","showActivities","activitiesForDisplay","useMemo","filterRegex","RegExp","unReadActivities","DashBoard","cardStatusByMember","cardsByMembers","prevText","prevName","arr","copy","splice","options","colors","chart","stacked","toolbar","show","zoom","enabled","responsive","plotOptions","bar","xaxis","categories","yaxis","lines","legend","position","offsetY","fill","opacity","series","_BoardPreview","view","onDragStart","onDragEnd","sourceGroup","cardToAdd","isShowDashboard","getBoardForDisplay","copyBoard","filteredCards","filteredBoard","BoardPreview","cloudinaryService","uploadImg","UPLOAD_URL","formData","FormData","append","post","_CardUpdates","isLoading","getCard","copyUpdate","files","onImageUploadBefore","onAddUpdate","regex","match","params","htmlUpdates","onDrop","handleDrop","setDefaultStyle","setOptions","buttonList","imageResizing","setContents","dangerouslySetInnerHTML","__html","CardUpdates","_BoardApp","isBoardSideBarOpen","innerWidth","loadBoardById","toggleBoardSideBar","currBoardId","getBoardsForDisplay","updateBoards","userBoards","render","exact","BoardApp","Home","undrawtask","_GeneralUserInfo","getActiveCards","activeCard","activeCards","borderLeft","href","GeneralUserInfo","_UpdateProfile","dateofbirth","tel","triggerMsg","validatePhoneNumber","userCopy","onTriggerMsg","onUpdateProfile","updateUser","aria-required","htmlFor","newUserInfo","UpdateProfile","_UserProfile","isMyProfile","UserProfile","App","component","initialState","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","hostname","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.33bdaf7a.chunk.js","sourcesContent":["import io from 'socket.io-client'\r\n\r\nconst baseUrl = (process.env.NODE_ENV === 'production')? 'https://sunday-app-2021.herokuapp.com/' : '//localhost:3030'\r\nexport const socketService = createSocketService()\r\n// export const socketService = createDummySocketService()\r\n\r\nwindow.socketService = socketService\r\n\r\n\r\nfunction createSocketService() {\r\n  var socket;\r\n  const socketService = {\r\n    setup() {\r\n      socket = io(baseUrl)\r\n    },\r\n    on(eventName, cb) {\r\n      socket.on(eventName, cb)\r\n    },\r\n    off(eventName, cb) {\r\n      socket.off(eventName, cb)\r\n    },\r\n    emit(eventName, data) {\r\n      socket.emit(eventName, data)\r\n    },\r\n    terminate() {\r\n      socket = null\r\n    }\r\n  }\r\n  return socketService\r\n}\r\n\r\n// eslint-disable-next-line\r\n// function createDummySocketService() {\r\n//   var listenersMap = {}\r\n//   const socketService = {\r\n//     setup() {\r\n//       listenersMap = {}\r\n//     },\r\n//     terminate() {\r\n//       this.setup()\r\n//     },\r\n//     on(eventName, cb) {\r\n//       listenersMap[eventName] = [...(listenersMap[eventName]) || [], cb]\r\n//     },\r\n//     off(eventName, cb) {\r\n//       if (!listenersMap[eventName]) return\r\n//       listenersMap[eventName] = listenersMap[eventName].filter(l => l !== cb)\r\n//     },\r\n//     emit(eventName, data) {\r\n//       if (!listenersMap[eventName]) return\r\n//       listenersMap[eventName].forEach(listener => {\r\n//         listener(data)\r\n//       })\r\n//     },\r\n//     debugMsg() {\r\n//       this.emit('chat addMsg', {from: 'Someone', txt: 'Aha it worked!'})\r\n//     },\r\n//   }\r\n//   return socketService\r\n// }\r\n\r\n\r\n// Basic Tests\r\n// function cb(x) {console.log(x)}\r\n// socketService.on('baba', cb)\r\n// socketService.emit('baba', 'DATA')\r\n// socketService.off('baba', cb)\r\n","import Axios from 'axios'\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n})\r\n\r\nexport const httpService = {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data\r\n    } catch (err) {\r\n        // console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`)\r\n        // console.dir(err)\r\n        if (err.response && err.response.status === 401) {\r\n            window.location.assign('/#/login')\r\n        }\r\n        throw err\r\n    }\r\n}","\r\nexport const utilService = {\r\n    delay,\r\n    getRandomInt,\r\n    makeId,\r\n    getNameInitials,\r\n    getRandomPassword,\r\n    getNameOfMonth,\r\n    \r\n\r\n}\r\n\r\nfunction delay(ms = 1500) {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, ms)\r\n    })\r\n}\r\n\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nfunction getNameInitials(name) {\r\n    name = name.split(' ');\r\n    const newName = name.map(word => word[0]).join('').toUpperCase();\r\n    return newName;\r\n\r\n}\r\nfunction makeId(length = 5) {\r\n    var txt = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (var i = 0; i < length; i++) {\r\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return txt;\r\n}\r\n\r\n\r\nfunction getNameOfMonth(month) {\r\n    switch (month) {\r\n        case 0:\r\n            return 'Jan'\r\n        case 1:\r\n            return 'Feb'\r\n        case 2:\r\n            return 'Mar'\r\n        case 3:\r\n            return 'Apr'\r\n        case 4:\r\n            return 'May'\r\n        case 5:\r\n            return 'Jun'\r\n        case 6:\r\n            return 'Jul'\r\n        case 7:\r\n            return 'Aug'\r\n        case 8:\r\n            return 'Sep'\r\n        case 9:\r\n            return 'Oct'\r\n        case 10:\r\n            return 'Nov'\r\n        case 11:\r\n            return 'Dec'\r\n        default:\r\n            return ''\r\n    }\r\n\r\n\r\n}\r\n\r\nfunction getRandomPassword() {\r\n\r\n    var pass = ''\r\n    var types = ['ABCDEFGHIJKLMNOPKRSTUVWXYZ', 'abcdefghijklmnopkrstuvwxyz', '@#$%^&*!', '1234567890']\r\n    var counter = 0\r\n    for (var i = 0; i < 8; i++) {\r\n        var currType = types[counter]\r\n        var randomChar = getRandomInt(0, currType.length)\r\n        pass += currType.charAt(randomChar)\r\n        counter++\r\n        if (counter === 3) counter = 0\r\n    }\r\n    return pass\r\n}\r\n","import { httpService } from './httpService'\r\nimport { utilService } from './utilService'\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    signup,\r\n    getUsers,\r\n    getUserById,\r\n    remove,\r\n    update,\r\n    getLoggedinUser,\r\n    updateNotifications,\r\n    cleanNotifications,\r\n    updateReadNotifications\r\n}\r\nfunction getUsers(txt) {\r\n    var queryStr = (!txt) ? '' : `?fullname=${txt}`\r\n    return httpService.get(`user${queryStr}`)\r\n}\r\nasync function getUserById(userId) {\r\n    const user = await httpService.get(`user/${userId}`)\r\n    return user\r\n}\r\n\r\nfunction remove(userId) {\r\n    return httpService.delete(`user/${userId}`)\r\n}\r\nasync function update(user) {\r\n    const updatedUser = await httpService.put(`user/${user._id}`, user)\r\n    // Handle case in which admin updates other user's details\r\n    if (getLoggedinUser()._id === updatedUser._id) _saveLocalUser(updatedUser)\r\n    return updatedUser\r\n}\r\n\r\nasync function login(userCred) {\r\n    try {\r\n        const user = await httpService.post('auth/login', userCred)\r\n        if (user) return _saveLocalUser(user)\r\n    } catch (err) {\r\n        throw new Error('Could\\'nt find users')\r\n    }\r\n}\r\n\r\nasync function signup(userCred) {\r\n    const user = await httpService.post('auth/signup', userCred)\r\n    return _saveLocalUser(user)\r\n}\r\n\r\nasync function logout() {\r\n    await httpService.post('auth/logout')\r\n    sessionStorage.clear()\r\n    return\r\n}\r\nfunction _saveLocalUser(user) {\r\n    sessionStorage.setItem('loggedinUser', JSON.stringify(user))\r\n    return user\r\n}\r\n\r\nfunction getLoggedinUser() {\r\n    return JSON.parse(sessionStorage.getItem('loggedinUser'))\r\n}\r\n\r\nasync function updateNotifications({ member, notificationTxt, user }) {\r\n    const notification = {\r\n        id: utilService.makeId(),\r\n        notificationTxt,\r\n        isRead: false,\r\n        createdAt: Date.now(),\r\n        byMember: {\r\n            _id: user._id,\r\n            fullname: user.fullname,\r\n            imgUrl: user.imgUrl ? user.imgUrl : null\r\n        }\r\n    }\r\n\r\n    const memberToAdd = await getUserById(member._id)\r\n    if (!memberToAdd.notifications) {\r\n        memberToAdd.notifications = [notification]\r\n    } else {\r\n        memberToAdd.notifications = [notification, ...memberToAdd.notifications]\r\n    }\r\n    return update(memberToAdd)\r\n}\r\n\r\nfunction updateReadNotifications(memberToUpdate) {\r\n    if (memberToUpdate.notifications) {\r\n        memberToUpdate.notifications.forEach(notification => notification.isRead = true);\r\n        return update(memberToUpdate)\r\n    }\r\n}\r\n\r\nasync function cleanNotifications(user) {\r\n    const memberToUpdate = await getUserById(user._id)\r\n    memberToUpdate.notifications = []\r\n    return update(memberToUpdate)\r\n}","import { socketService } from '../../services/socketService.js';\r\nimport { userService } from '../../services/userService.js'\r\nexport function query(txt) {\r\n    return async () => {\r\n        try {\r\n            return await userService.getUsers(txt)\r\n        } catch (err) {\r\n        }\r\n    }\r\n}\r\nexport function getUserById(userId) {\r\n    return async () => {\r\n        try {\r\n            return await userService.getUserById(userId)\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n}\r\nexport function setMsg(msg) {\r\n    return (dispatch) => {\r\n        let action = {\r\n            type: 'SET_MSG',\r\n            msg\r\n        }\r\n        dispatch(action)\r\n        setTimeout(() => {\r\n            action = {\r\n                type: 'CLEAR_MSG'\r\n            }\r\n            dispatch(action)\r\n        }, 2000)\r\n    }\r\n}\r\nexport function clearMsg() {\r\n    return (dispatch) => {\r\n        const action = {\r\n            type: 'CLEAR_MSG',\r\n        }\r\n        dispatch(action)\r\n    }\r\n}\r\nexport function checkLogin(credentials) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const user = await userService.login(credentials)\r\n            const action = {\r\n                type: 'SET_LOGGED_IN_USER',\r\n                user\r\n            }\r\n            dispatch(action)\r\n            return user\r\n        } catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function signup(credentials) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const user = await userService.signup(credentials)\r\n            const action = {\r\n                type: 'SET_LOGGED_IN_USER',\r\n                user\r\n            }\r\n            dispatch(action)\r\n            return user\r\n        } catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function logOut() {\r\n    return async (dispatch) => {\r\n        try {\r\n            await userService.logout()\r\n            dispatch({ type: 'LOG_OUT' })\r\n            dispatch({ type: 'SET_BOARDS', boards: [] })\r\n            dispatch({ type: 'SET_CURR_BOARD', board: null })\r\n        } catch (err) {\r\n        }\r\n    }\r\n}\r\nexport function updateUser(newUserInfo) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const user = await userService.update(newUserInfo)\r\n            const action = {\r\n                type: 'SET_LOGGED_IN_USER',\r\n                user\r\n            }\r\n            dispatch(action)\r\n            return user\r\n        } catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function updateUserNotifications(user) {\r\n    return (dispatch) => {\r\n        const action = {\r\n            type: 'SET_LOGGED_IN_USER',\r\n            user\r\n        }\r\n        dispatch(action)\r\n    }\r\n}\r\nexport function cleanNotifications(user) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const userToUpdate = await userService.cleanNotifications(user)\r\n            const action = {\r\n                type: 'SET_LOGGED_IN_USER',\r\n                user: userToUpdate\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n}\r\nexport function updateReadNotifications(user) {\r\n    return async () => {\r\n        try {\r\n            const userToUpdate = await userService.updateReadNotifications(user)\r\n            return (dispatch) => {\r\n                const action = {\r\n                    type: 'SET_LOGGED_IN_USER',\r\n                    user: userToUpdate\r\n                }\r\n                dispatch(action)\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n}","import { utilService } from '../services/utilService.js'\r\nimport { httpService } from './httpService.js';\r\n\r\n\r\nexport const boardService = {\r\n    query,\r\n    removeBoard,\r\n    getBoardById,\r\n    addCard,\r\n    addBoard,\r\n    addGroup,\r\n    deleteCard,\r\n    getBoardIdByIdx,\r\n    changeBoardTitle,\r\n    changeCardTitle,\r\n    changeGroupTitle,\r\n    updateTaskMembers,\r\n    changeCardDates,\r\n    changeCardLabels,\r\n    changeGroupColor,\r\n    removeGroup,\r\n    changeBoardMemebrs,\r\n    changeGroupIdx,\r\n    changeCardIdx,\r\n    sortByTitle,\r\n    sortByDate,\r\n    sortCardByDate,\r\n    addCardLabel,\r\n    updateActivities,\r\n    deepSearchByKey,\r\n    getKeyById,\r\n    addCardUpdate\r\n\r\n}\r\n\r\n\r\nfunction getKeyById(source, target) {\r\n\r\n    const sourceSet = new Set()\r\n    return findTarget(source, target)\r\n    \r\n    function findTarget(source, target) {\r\n        \r\n    \r\n        if (!source) {\r\n            sourceSet.clear()\r\n            return\r\n        }\r\n\r\n        if (sourceSet.has(source)) {\r\n          \r\n            sourceSet.clear()\r\n            return\r\n        }\r\n\r\n        sourceSet.add(source)\r\n\r\n        if (Array.isArray(source)) {\r\n            for (let arrayItem of source) {\r\n                const value = findTarget(arrayItem, target);\r\n                if (value) return value\r\n            }\r\n        } else if (typeof source === 'object') {\r\n            for (let key of Object.keys(source)) {\r\n                if (source[key] === target) {\r\n                    return source\r\n                } else if (typeof source[key] === 'object' || Array.isArray(source[key])) {\r\n                    const value = findTarget(source[key], target)\r\n                    if (value) return value\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction deepSearchByKey(object, originalKey, matches = []) {\r\n\r\n    if (object !== null) {\r\n        if (Array.isArray(object)) {\r\n            for (let arrayItem of object) {\r\n                deepSearchByKey(arrayItem, originalKey, matches);\r\n            }\r\n        } else if (typeof object === 'object') {\r\n\r\n            for (let key of Object.keys(object)) {\r\n                if (key === 'groups') {\r\n                    deepSearchByKey(object[key], originalKey, matches);\r\n\r\n                } else if (key === 'cards' && object.hasOwnProperty('cards')) {\r\n                    object[key].forEach(obj => {\r\n                        if (obj._id === originalKey) matches.push(object)\r\n                    })\r\n                } else {\r\n                    deepSearchByKey(object[key], originalKey, matches);\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return matches;\r\n}\r\n\r\n\r\n\r\n\r\nasync function query(userId) {\r\n\r\n    try {\r\n        var queryStr = (!userId) ? '' : `?userId=${userId}`\r\n\r\n        return httpService.get(`board${queryStr}`)\r\n    } catch (err) {\r\n        throw new Error('couldn\\'t find boards')\r\n    }\r\n}\r\n\r\nasync function getBoardById(boardId, filterBy) {\r\n    try {\r\n        return httpService.get(`board/${boardId}`)\r\n    } catch (err) {\r\n        throw new Error('couldn\\'t find board')\r\n    }\r\n}\r\nasync function removeBoard(boardId) {\r\n    return httpService.delete(`board/${boardId}`)\r\n    // return await storageService.remove('boards', boardId)\r\n}\r\n\r\nfunction getBoardIdByIdx(boardIdx, boards) {\r\n\r\n    let currBoardId = (!boardIdx && boards.length) ? boards[boardIdx]._id : boards[boardIdx - 1]?._id\r\n    return currBoardId\r\n}\r\n\r\n\r\n\r\nasync function addBoard(boardTitle, user) {\r\n    try {\r\n        const boardToAdd = {\r\n            title: boardTitle,\r\n            createdBy: {},\r\n            members: [],\r\n            activities: [],\r\n            groups: [_createDefaultGroup(user)]\r\n        }\r\n        // return await storageService.post('boards', boardToAdd)\r\n        return httpService.post('board', boardToAdd)\r\n    } catch (err) {\r\n        throw err\r\n\r\n    }\r\n}\r\n\r\nfunction _findGroupById(board, groupId) {\r\n    const group = board.groups.find(group => groupId === group.id)\r\n    return group\r\n}\r\n\r\nasync function addCard({ board, groupId, cardTitle, user }) {\r\n    try {\r\n        const boardToUpdate = JSON.parse(JSON.stringify(board))\r\n        const groupToUpdate = _findGroupById(boardToUpdate, groupId)\r\n        const activityText = `added a new card : ${cardTitle}, to group : ${groupToUpdate.title}`\r\n        const activity = _createBoardActivity(user, activityText)\r\n        boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n        groupToUpdate.cards = [...groupToUpdate.cards, (_createCard(cardTitle, user))]\r\n        const groups = boardToUpdate.groups.map(group => group.id === groupToUpdate.id ? groupToUpdate : group)\r\n        boardToUpdate.groups = groups\r\n        httpService.put('board', boardToUpdate)\r\n        return boardToUpdate\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n\r\n}\r\n\r\nasync function addGroup(board, user) {\r\n    try {\r\n        const activityText = `added a new group`\r\n        const activity = _createBoardActivity(user, activityText)\r\n        const boardToUpdate = JSON.parse(JSON.stringify(board))\r\n        boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n        const newGroup = _createDefaultGroup(user);\r\n        boardToUpdate.groups = [newGroup, ...boardToUpdate.groups]\r\n         httpService.put('board', boardToUpdate)\r\n        return boardToUpdate\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function deleteCard({ board, groupId, cardId, user }) {\r\n    try {\r\n        const boardToUpdate = JSON.parse(JSON.stringify(board))\r\n        const groupToUpdate = _findGroupById(boardToUpdate, groupId)\r\n        const activityText = `deleted a card in group : ${groupToUpdate.title}`\r\n        const activity = _createBoardActivity(user, activityText)\r\n        boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n\r\n        const cards = groupToUpdate.cards.filter(card => card.id !== cardId)\r\n        groupToUpdate.cards = cards\r\n        const groups = boardToUpdate.groups.map(group => group.id === groupToUpdate.id ? groupToUpdate : group)\r\n        boardToUpdate.groups = groups\r\n\r\n         httpService.put('board', boardToUpdate)\r\n        return boardToUpdate\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function changeBoardTitle(newTitle, board, user) {\r\n\r\n    const boardToUpdate = JSON.parse(JSON.stringify(board))\r\n    const activityText = `changed board title from '${boardToUpdate.title}' to '${newTitle}'`\r\n    const activity = _createBoardActivity(user, activityText)\r\n    boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n    boardToUpdate.title = newTitle\r\n     httpService.put('board', boardToUpdate)\r\n    return boardToUpdate\r\n}\r\n\r\nfunction sortByTitle(groupsToSort) {\r\n    groupsToSort = groupsToSort.sort((group1, group2) => {\r\n        if (group1.title.toLowerCase() > group2.title.toLowerCase()) return 1\r\n        else if (group1.title.toLowerCase() < group2.title.toLowerCase()) return -1;\r\n        else return 0;\r\n    })\r\n    return groupsToSort\r\n}\r\n\r\nfunction sortByDate(groupsToSort) {\r\n    groupsToSort = groupsToSort.sort((group1, group2) => {\r\n        return group2.createdAt - group1.createdAt\r\n    })\r\n    return groupsToSort\r\n}\r\n\r\nfunction sortCardByDate(cards) {\r\n    let cardsToSort = JSON.parse(JSON.stringify(cards))\r\n    cardsToSort = cardsToSort.sort((card1, card2) => {\r\n        var card1Sort;\r\n        var card2Sort;\r\n        if (card1.dueDate.endDate) {\r\n            card1Sort = card1.dueDate.endDate\r\n        } else card1Sort = card1.dueDate.startDate ? card1.dueDate.startDate : card1.createdAt\r\n        if (card2.dueDate.endDate) {\r\n            card2Sort = card2.dueDate.endDate\r\n        } else card2Sort = card2.dueDate.startDate ? card2.dueDate.startDate : card2.createdAt\r\n\r\n        return new Date(card1Sort).getTime() - new Date(card2Sort).getTime()\r\n\r\n    })\r\n    return cardsToSort\r\n}\r\n\r\nasync function changeGroupColor(color, board, groupId) {\r\n    try {\r\n\r\n        const boardToUpdate = { ...board }\r\n        const groups = boardToUpdate.groups.map(group => {\r\n            if (group.id === groupId) {\r\n                group.style.color = color\r\n                return group\r\n            } else return group\r\n        })\r\n        boardToUpdate.groups = groups\r\n        httpService.put('board', boardToUpdate)\r\n        return boardToUpdate\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function removeGroup(board, groupToUpdate, user) {\r\n    try {\r\n        const boardToUpdate = JSON.parse(JSON.stringify(board))\r\n        const activityText = `removed group ${groupToUpdate.title}`\r\n        const activity = _createBoardActivity(user, activityText)\r\n        boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n\r\n        const groups = boardToUpdate.groups.filter(group => group.id !== groupToUpdate.id)\r\n        boardToUpdate.groups = groups\r\n         httpService.put('board', boardToUpdate)\r\n        return boardToUpdate\r\n\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n\r\n}\r\n\r\nasync function changeGroupIdx(board, result) {\r\n    const { destination, source } = result\r\n    try {\r\n        const boardToUpdate = JSON.parse(JSON.stringify(board))\r\n        const newGroups = boardToUpdate.groups.map((group, idx, groups) => {\r\n            if (idx === source.index) return groups[destination.index]\r\n            if (idx === destination.index) return groups[source.index]\r\n            else return group\r\n        })\r\n        boardToUpdate.groups = newGroups;\r\n        httpService.put('board', boardToUpdate)\r\n        return boardToUpdate\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function changeCardIdx(boardToUpdate, result) {\r\n\r\n    try {\r\n        return httpService.put('board', boardToUpdate)\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\n\r\nasync function changeGroupTitle({ board, groupId, groupTitle, user }) {\r\n    try {\r\n        const boardToUpdate = JSON.parse(JSON.stringify(board))\r\n        let prevTitle = ''\r\n\r\n        const groups = boardToUpdate.groups.map(group => {\r\n            if (group.id === groupId) {\r\n                prevTitle = group.title\r\n                group.title = groupTitle\r\n                return group\r\n            } else return group\r\n        })\r\n        boardToUpdate.groups = groups\r\n        const activityText = `changed group title from ${prevTitle} to ${groupTitle}`\r\n        const activity = _createBoardActivity(user, activityText)\r\n        boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n        httpService.put('board', boardToUpdate)\r\n        return boardToUpdate\r\n    } catch (err) {\r\n        // console.log(err);\r\n    }\r\n}\r\n\r\nfunction updateTaskMembers(memberId, sign, board, cardToUpdate, groupId, user) {\r\n    try {\r\n        const boardToUpdate = JSON.parse(JSON.stringify(board))\r\n        const groupToUpdate = _findGroupById(boardToUpdate, groupId)\r\n        const member = boardToUpdate.members.find(member => member._id === memberId)\r\n        var cards;\r\n        var activityText;\r\n        var notificationTxt;\r\n\r\n        if (sign === 'remove') {\r\n            activityText = `removed ${member.fullname} from card '${cardToUpdate.title}' `\r\n            if (memberId !== user._id) notificationTxt = `${user.fullname} removed you from card '${cardToUpdate.title}' in group : ${groupToUpdate.title}`\r\n            cards = groupToUpdate.cards.map(card => {\r\n                if (cardToUpdate.id === card.id) {\r\n                    const members = card.members.filter(member => memberId !== member._id)\r\n                    card.members = members\r\n                    return card\r\n                } else return card\r\n            })\r\n        }\r\n        else {\r\n            activityText = `added ${member.fullname} to card '${cardToUpdate.title}'`\r\n            if (memberId !== user._id) notificationTxt = `${user.fullname} added you to card '${cardToUpdate.title}' in group : ${groupToUpdate.title}`\r\n            cards = groupToUpdate.cards.map(card => {\r\n                if (cardToUpdate.id === card.id) {\r\n                    const members = [...card.members, member]\r\n                    card.members = members\r\n                    return card\r\n                } else return card\r\n            })\r\n        }\r\n\r\n        const activity = _createBoardActivity(user, activityText)\r\n        boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n        groupToUpdate.cards = cards\r\n        const groups = boardToUpdate.groups.map(group => group.id === groupToUpdate.id ? groupToUpdate : group)\r\n        boardToUpdate.groups = groups\r\n        httpService.put('board', boardToUpdate)\r\n        if (notificationTxt) return { member, notificationTxt, user }\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n\r\n}\r\nfunction changeBoardMemebrs(memberData, board, type, user) {\r\n\r\n    const boardToUpdate = JSON.parse(JSON.stringify(board));\r\n    var activityText;\r\n    var notificationTxt;\r\n    var member\r\n\r\n\r\n    if (type === 'remove') {\r\n        const membersToRemove = boardToUpdate.members.find(member => member._id === memberData)\r\n        if (memberData !== user._id) notificationTxt = `${user.fullname} remove you from '${board.title}' `\r\n        member = boardToUpdate.members.find(member => member._id === memberData)\r\n        activityText = `removed ${membersToRemove.fullname} from this board`\r\n        boardToUpdate.members = boardToUpdate.members.filter(member => member._id !== memberData)\r\n        boardToUpdate.groups = boardToUpdate.groups.map(group => {\r\n            group.cards = group.cards.map(card => {\r\n                card.members = card.members.filter(member => member._id !== memberData);\r\n                return card\r\n            })\r\n            return group;\r\n        })\r\n\r\n    } else {\r\n        activityText = `added ${memberData.fullname} to this board`\r\n        if (memberData._id !== user._id) notificationTxt = `${user.fullname} add you to '${board.title}'`\r\n        member = { ...memberData }\r\n        const newMembers = [...boardToUpdate.members, memberData];\r\n        boardToUpdate.members = newMembers\r\n    }\r\n    const activity = _createBoardActivity(user, activityText)\r\n    boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n    httpService.put('board', boardToUpdate)\r\n    if (notificationTxt) return { member, notificationTxt, user }\r\n    // if (notificationTxt) return { member: user, notificationTxt, user: memberData }\r\n\r\n}\r\n\r\nasync function changeCardLabels(board, cardToUpdate, groupId, label, labelType, user) {\r\n    try {\r\n        const boardToUpdate = JSON.parse(JSON.stringify(board))\r\n        const groupToUpdate = _findGroupById(boardToUpdate, groupId)\r\n        const activityText = `updated ${labelType} in card '${cardToUpdate.title}' from '${cardToUpdate[labelType].text}' to '${label.text}'`\r\n        const activity = _createBoardActivity(user, activityText)\r\n        boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n\r\n        const cards = groupToUpdate.cards.map(card => {\r\n            if (cardToUpdate.id === card.id) {\r\n                card[labelType] = label;\r\n                return card\r\n            } else return card\r\n        })\r\n        groupToUpdate.cards = cards\r\n        const groups = boardToUpdate.groups.map(group => group.id === groupToUpdate.id ? groupToUpdate : group)\r\n        boardToUpdate.groups = groups\r\n        httpService.put('board', boardToUpdate)\r\n        return boardToUpdate\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\n\r\n\r\nasync function addCardUpdate(cardUpdate, board, cardToUpdate) {\r\n    try {\r\n        cardUpdate.createdAt = Date.now()\r\n        if (cardToUpdate.updates) {\r\n            cardToUpdate.updates.unshift(cardUpdate)\r\n        } else cardToUpdate.updates = [...cardUpdate]\r\n\r\n        const boardToUpdate = JSON.parse(JSON.stringify(board))\r\n        const groupsToUpdate = boardToUpdate.groups.map(group => {\r\n            const cards = group.cards.map(card => {\r\n                if (card.id === cardToUpdate.id) return cardToUpdate\r\n                else return card\r\n            })\r\n            group.cards = cards\r\n            return group\r\n        })\r\n\r\n        boardToUpdate.groups = groupsToUpdate\r\n        return httpService.put('board', boardToUpdate)\r\n\r\n    } catch (err) {\r\n        // console.log(err);\r\n    }\r\n}\r\n\r\n\r\nasync function addCardLabel(board, groupId, label, labelGroup) {\r\n    try {\r\n        const groups = board.groups.map(group => {\r\n            if (group.id === groupId) {\r\n                const groupToUpdate = { ...group }\r\n                groupToUpdate[labelGroup] = [...groupToUpdate[labelGroup], label];\r\n                return groupToUpdate;\r\n            } else return group;\r\n        })\r\n        board.groups = groups\r\n         httpService.put('board', board)\r\n        return board\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function changeCardTitle({ board, groupId, cardToUpdate, cardTitle, user }) {\r\n    try {\r\n        const boardToUpdate = JSON.parse(JSON.stringify(board))\r\n        const groupToUpdate = _findGroupById(boardToUpdate, groupId)\r\n        const activityText = `changed card title from ${cardToUpdate.title} to ${cardTitle}`\r\n        const activity = _createBoardActivity(user, activityText)\r\n        boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n\r\n\r\n        const cards = groupToUpdate.cards.map(card => {\r\n            if (card.id === cardToUpdate.id) {\r\n                card.title = cardTitle\r\n                return card\r\n            } else return card\r\n        })\r\n        groupToUpdate.cards = cards\r\n        const groups = boardToUpdate.groups.map(group => group.id === groupToUpdate.id ? groupToUpdate : group)\r\n        boardToUpdate.groups = groups\r\n        // return await storageService.put('boards', board)\r\n        return httpService.put('board', boardToUpdate)\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n\r\n}\r\n\r\nasync function changeCardDates(dates, board, groupId, cardToUpdate, user) {\r\n\r\n    const boardToUpdate = JSON.parse(JSON.stringify(board))\r\n    const groupToUpdate = _findGroupById(boardToUpdate, groupId)\r\n    const activityText = `updated dates in card '${cardToUpdate.title}'`\r\n    const activity = _createBoardActivity(user, activityText)\r\n    boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n\r\n    const cards = groupToUpdate.cards.map(card => {\r\n        if (card.id === cardToUpdate.id) {\r\n            card.dueDate = dates\r\n            return card\r\n        } else return card\r\n    })\r\n    groupToUpdate.cards = cards\r\n    const groups = boardToUpdate.groups.map(group => group.id === groupToUpdate.id ? groupToUpdate : group)\r\n    boardToUpdate.groups = groups\r\n    httpService.put('board', boardToUpdate)\r\n    return boardToUpdate\r\n}\r\n\r\nfunction updateActivities(board, isClear) {\r\n    const boardToUpdate = JSON.parse(JSON.stringify(board))\r\n    if (isClear) boardToUpdate.activities = []\r\n    else boardToUpdate.activities.forEach(activity => activity.isRead = true)\r\n    return httpService.put('board', boardToUpdate)\r\n}\r\n\r\n\r\nfunction _createBoardActivity(user, txt) {\r\n    return {\r\n        \"id\": utilService.makeId(),\r\n        txt,\r\n        isRead: false,\r\n        \"createdAt\": Date.now(),\r\n        \"byMember\": {\r\n            \"_id\": user._id,\r\n            \"fullname\": user.fullname,\r\n            \"imgUrl\": user.imgUrl ? user.imgUrl : null\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction _createCard(cardTitle, user) {\r\n    return {\r\n        id: utilService.makeId(),\r\n        title: cardTitle,\r\n        updates: [],\r\n        members: [\r\n            {\r\n                \"_id\": user._id,\r\n                \"fullname\": user.fullname,\r\n                \"imgUrl\": user.imgUrl ? user.imgUrl : null\r\n            }\r\n        ],\r\n        status:\r\n            { text: 'No status yet', color: '#cccccc', id: utilService.makeId() },\r\n        priority:\r\n            { text: 'Set priority', color: '#cccccc', id: utilService.makeId() },\r\n        createdAt: Date.now(),\r\n        dueDate: {\r\n            startDate: '',\r\n            endDate: ''\r\n        },\r\n        createdBy: {\r\n            _id: user._id,\r\n            fullname: user.fullname,\r\n            imgUrl: user.imgUrl ? user.imgUrl : null\r\n        },\r\n    }\r\n}\r\n\r\nfunction _createDefaultGroup(user) {\r\n    return {\r\n        id: utilService.makeId(),\r\n        title: \"New group\",\r\n        createdBy: {\r\n            \"_id\": user._id,\r\n            \"fullname\": user.fullname,\r\n            \"imgUrl\": user.imgUrl ? user.imgUrl : null\r\n        },\r\n        createdAt: Date.now(),\r\n        statuses: [\r\n            { text: 'Done', color: '#00ca72', id: utilService.makeId() },\r\n            { text: 'Stuck', color: '#fb275d', id: utilService.makeId() },\r\n            { text: 'Working on it', color: '#ffcc00', id: utilService.makeId() }\r\n        ],\r\n        priorities: [\r\n            { text: 'Low', color: '#6bf1b9', id: utilService.makeId() },\r\n            { text: 'Medium', color: '#6b97f1', id: utilService.makeId() },\r\n            { text: 'High', color: '#ff812f', id: utilService.makeId() },\r\n            { text: 'Urgent', color: '#ff2f2f', id: utilService.makeId() }\r\n        ],\r\n        cards: [\r\n            _createCard('New item', user)\r\n        ],\r\n        style: { color: \"#0085ff\" }\r\n    }\r\n}","import { boardService } from \"../../services/boardService\"\r\nimport { socketService } from \"../../services/socketService\"\r\nimport { userService } from \"../../services/userService\"\r\nexport function loadBoards(userId) {\r\n    return async dispatch => {\r\n        try {\r\n            const boards = await boardService.query(userId)\r\n            const action = {\r\n                type: 'SET_BOARDS',\r\n                boards\r\n            }\r\n            dispatch(action)\r\n            return boards\r\n        } catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function getBoardsByUserId(userId) {\r\n    return async () => {\r\n        try {\r\n            const boards = await boardService.query(userId)\r\n            return boards\r\n        } catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function changeBoardTitle(newTitle, board, user) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const boardToUpdate = await boardService.changeBoardTitle(newTitle, board, user)\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board: boardToUpdate\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board\r\n            }\r\n            dispatch(action)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function removeBoard(boardId) {\r\n    return async (dispatch) => {\r\n        try {\r\n            await boardService.removeBoard(boardId)\r\n            const action = {\r\n                type: 'REMOVE_BOARD',\r\n                boardId\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function updateBoards(board) {\r\n    return (dispatch) => {\r\n        const action = {\r\n            type: 'UPDATE_BOARDS',\r\n            board\r\n        }\r\n        dispatch(action)\r\n    }\r\n}\r\nexport function getBoardById(boardId) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const board = await boardService.getBoardById(boardId)\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board\r\n            }\r\n            dispatch(action)\r\n            return board\r\n        } catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function addCard(cardToAdd) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const board = await boardService.addCard(cardToAdd)\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board: cardToAdd.board\r\n            }\r\n            dispatch(action)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function addGroup(board, user) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const boardToUpdate = await boardService.addGroup(board, user)\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board: boardToUpdate\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board\r\n            }\r\n            dispatch(action)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function addBoard(boardTitle, user) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const board = await boardService.addBoard(boardTitle, user)\r\n            const action = {\r\n                type: 'ADD_BOARD',\r\n                board\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n}\r\nexport function changeGroupIdx(board, result) {\r\n    return async () => {\r\n        try {\r\n            return await boardService.changeGroupIdx(board, result)\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n}\r\nexport function changeCardIdx(board, result) {\r\n    return async (dispatch) => {\r\n        return await boardService.changeCardIdx(board, result)\r\n    }\r\n}\r\nexport function deleteCard(cardToDelete) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const boardToUpdate = await boardService.deleteCard(cardToDelete)\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board: boardToUpdate\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board: cardToDelete.board\r\n            }\r\n            dispatch(action)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function changeBoardMemebrs(memberData, board, type, user) {\r\n    return async () => {\r\n        try {\r\n            const notification = await boardService.changeBoardMemebrs(memberData, board, type, user)\r\n            const userToUpdate = await userService.updateNotifications(notification)\r\n            socketService.emit('onUpdateUser', userToUpdate)\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n}\r\nexport function removeGroup(board, group, user) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const boardToUpdate = await boardService.removeGroup(board, group, user)\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board: boardToUpdate\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board\r\n            }\r\n            dispatch(action)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function changeCardLabels(board, card, groupId, label, labelType, user) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const boardToUpdate = await boardService.changeCardLabels(board, card, groupId, label, labelType, user)\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board: boardToUpdate\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board\r\n            }\r\n            dispatch(action)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function addCardLabel(board, groupId, label, labelGroup) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const boardToUpdate = await boardService.addCardLabel(board, groupId, label, labelGroup)\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board: boardToUpdate\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board\r\n            }\r\n            dispatch(action)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function changeCardTitle(cardToUpdate) {\r\n    return async () => {\r\n        try {\r\n            await boardService.changeCardTitle(cardToUpdate)\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n}\r\nexport function changeGroupColor(color, board, groupId) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const boardToUpdate = await boardService.changeGroupColor(color, board, groupId)\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board: boardToUpdate\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board\r\n            }\r\n            dispatch(action)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function onChangeGroupTitle(groupToUpdate) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const board = await boardService.changeGroupTitle(groupToUpdate)\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board: groupToUpdate.board\r\n            }\r\n            dispatch(action)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function changeTaskMembers(memberId, sign, board, card, groupId, user) {\r\n    return async () => {\r\n        try {\r\n            const notification = await boardService.updateTaskMembers(memberId, sign, board, card, groupId, user)\r\n            const userToUpdate = await userService.updateNotifications(notification)\r\n            socketService.emit('onUpdateUser', userToUpdate)\r\n        } catch (err) {\r\n        }\r\n    }\r\n}\r\nexport function changeCardDates(dates, board, groupId, card, user) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const boardToUpdate = await boardService.changeCardDates(dates, board, groupId, card, user)\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board: boardToUpdate\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board\r\n            }\r\n            dispatch(action)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function getKeyById(object, targetValue) {\r\n    return async () => {\r\n        try {\r\n            return boardService.getKeyById(object, targetValue)\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n}\r\nexport function addCardUpdate(cardUpdate, board, card) {\r\n    return async () => {\r\n        try {\r\n            return await boardService.addCardUpdate(cardUpdate, board, card)\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n}\r\nexport function onDragStart() {\r\n    return (dispatch) => {\r\n        const action = {\r\n            type: 'ON_DRAG'\r\n        }\r\n        dispatch(action)\r\n    }\r\n}\r\nexport function onDragEnd() {\r\n    return (dispatch) => {\r\n        const action = {\r\n            type: 'ON_DRAG_END'\r\n        }\r\n        dispatch(action)\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/sunday-logo.e9faebf5.svg\";","import React, { Component } from 'react'\r\nimport { NavLink, withRouter, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\nimport sunday from \"../assets/img/sunday-logo.svg\"\r\nimport { checkLogin,updateUserNotifications } from '../store/actions/userAction.js'\r\nimport { loadBoards } from '../store/actions/boardAction.js'\r\nimport { socketService } from '../services/socketService';\r\n\r\nclass _HomeHeader extends Component {\r\n    state = {\r\n        isNavOpen: false,\r\n        isScrolled: false,\r\n        scrollTop: 0\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"scroll\", this.handleScroll);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"scroll\", this.handleScroll);\r\n    }\r\n\r\n    handleScroll = () => {\r\n        const excludedRoutes = [\r\n            '/',\r\n            '/login',\r\n            '/signup'\r\n        ]\r\n        if (window.scrollY > 0 && excludedRoutes.indexOf(this.props.location.pathname) > 0) {\r\n            document.querySelector(\".home-header-container\").className = \"flex home-header-container header-shadow\";\r\n        } else if (excludedRoutes.indexOf(this.props.location.pathname) > 0) {\r\n            document.querySelector(\".home-header-container\").className = \"flex home-header-container\";\r\n        }\r\n    };\r\n\r\n    toggleMobileNav = () => {\r\n        const { isNavOpen } = this.state;\r\n        this.setState({ isNavOpen: !isNavOpen });\r\n    }\r\n\r\n    render() {\r\n        const { isNavOpen } = this.state;\r\n        return <header ref={this.scrollRef} onScroll={this.onScroll} className={`home-header-container flex`}>\r\n            <Link to=\"/\"> <img src={sunday} alt=\"sunday logo\" /> </Link>\r\n            <nav>\r\n                <div className={`hamburger ${isNavOpen ? 'open' : ''}`} onClick={this.toggleMobileNav}>\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                </div>\r\n                <ul className={`flex nav-list ${isNavOpen ? 'open-nav' : ''}`}>\r\n                    <li><NavLink activeClassName=\"nav-active\" to=\"/login\">Log in</NavLink></li>\r\n                    <li><NavLink activeClassName=\"nav-active\" to=\"/signup\">Sign up</NavLink></li>\r\n                    <li><button className=\"home-header-login-btn\" onClick={async () => {\r\n                        try {\r\n                            const user = await this.props.checkLogin({\r\n                                username: \"guest\",\r\n                                password: \"12345678\"\r\n                            })\r\n                            if (user) {\r\n                                const boards = await this.props.loadBoards(user._id)\r\n                                const path = (boards.length) ? `/board/${boards[0]._id}` : '/board'\r\n                                this.props.history.push(path)\r\n                            }\r\n                        } catch (err) {\r\n                            // console.log(err);\r\n                        }\r\n                    }}>Try as guest</button></li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    }\r\n}\r\n\r\n\r\nconst mapGlobalStateToProps = (state) => {\r\n    return {\r\n        user: state.userReducer.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    checkLogin,\r\n    loadBoards,\r\n    updateUserNotifications\r\n}\r\n\r\n\r\nexport const HomeHeader = withRouter(connect(mapGlobalStateToProps, mapDispatchToProps)(_HomeHeader));","import { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\nimport { checkLogin } from '../store/actions/userAction.js'\r\nimport { loadBoards } from '../store/actions/boardAction.js'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { updateUserNotifications } from '../store/actions/userAction.js'\r\n\r\n\r\n\r\n\r\n\r\nimport { HomeHeader } from '../cmps/HomeHeader.jsx';\r\n\r\nclass _Login extends Component {\r\n\r\n    state = {\r\n        msg: '',\r\n        loggedinUser: '',\r\n        loginCred: {\r\n            username: '',\r\n            password: '',\r\n        }\r\n    }\r\n\r\n    loginHandleChange = ev => {\r\n        const { name, value } = ev.target\r\n        this.setState(prevState => ({\r\n            loginCred: {\r\n                ...prevState.loginCred,\r\n                [name]: value\r\n            }\r\n        }))\r\n    }\r\n\r\n    doLogin = async ev => {\r\n        ev.preventDefault()\r\n        const { username, password } = this.state.loginCred\r\n        if (!username || !password) {\r\n            this.setState({ msg: 'Please enter username/password' })\r\n            return\r\n        } try {\r\n            \r\n            const user = await this.props.checkLogin({ ...this.state.loginCred })\r\n            if (user) {              \r\n                const boards = await this.props.loadBoards(user._id)\r\n                const path = (boards.length) ? `/board/${boards[0]._id}` : '/board'\r\n                this.props.history.push(path)\r\n            }\r\n        } catch (err) {\r\n            this.setState({ msg: 'Wrong username/password' })\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main-login-signup-container\">\r\n                <HomeHeader/>\r\n                <div className=\"inner-login-signup-container\">\r\n                    <div>\r\n                        <h2>Welcome back</h2>\r\n                        <h3>Log in</h3>\r\n                    </div>\r\n                    <form onSubmit={this.doLogin} className=\"sunday-form\">\r\n                        <TextField margin=\"normal\" required name=\"username\" placeholder=\"Username\" autoFocus\r\n                            onChange={this.loginHandleChange} />\r\n                        <TextField\r\n                            required\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                            onChange={this.loginHandleChange}\r\n                        />\r\n                        <h3>{this.state.msg}</h3>\r\n                        <button className=\"login-signup-btn\" type=\"submit\">Sign in</button>\r\n                    </form>\r\n                    <Link to=\"/signup\">Don't have an account? <b>Sign Up</b></Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapGlobalStateToProps = (state) => {\r\n    return {\r\n        boards: state.boardReducer.boards,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    checkLogin,\r\n    loadBoards,\r\n    updateUserNotifications\r\n}\r\nexport const Login = connect(mapGlobalStateToProps, mapDispatchToProps)(_Login)\r\n\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { signup } from '../store/actions/userAction.js'\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport { Link } from 'react-router-dom'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { utilService } from '../services/utilService.js';\r\nimport { VisibilityOff, Visibility } from '@material-ui/icons';\r\nimport { HomeHeader } from './HomeHeader.jsx';\r\n\r\n\r\n\r\nclass _SignUp extends Component {\r\n\r\n    state = {\r\n        msg: '',\r\n        signupCred: {\r\n            username: '',\r\n            password: '',\r\n            fullname: '',\r\n            email: '',\r\n            confirm: ''\r\n        },\r\n        isShowPassword: false\r\n    }\r\n\r\n    onSignUp = async (user) => {\r\n\r\n        const { username, password, fullname, email } = user\r\n        try {\r\n            await this.props.signup({ username, password, fullname, email })\r\n            this.setState(prevState => ({ signupCred: { ...prevState.signupCred, password: '', confirm: '', username: '', fullname: '', email: 'signupCred' } }))\r\n            this.props.history.push('/board')\r\n        } catch (err) {\r\n            this.setState({ msg: 'Try again' })\r\n        }\r\n\r\n    }\r\n\r\n    onTogglePassword = () => {\r\n        this.setState(prevState => ({ ...prevState, isShowPassword: !this.state.isShowPassword }))\r\n    }\r\n\r\n\r\n    validate = (values) => {\r\n        this.setState({ signupCred: values })\r\n        const errors = {};\r\n        if (!values.username) {\r\n            errors.username = 'Required';\r\n        }\r\n        if (!values.fullname) {\r\n            errors.fullname = 'Required';\r\n        }\r\n        if (!values.email) {\r\n            errors.email = 'Required';\r\n        } else if (\r\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n        ) {\r\n            errors.email = 'Invalid email address';\r\n        }\r\n        // if (!values.password) {\r\n        //     // errors.password = 'Password is too short'\r\n        //     errors.password = 'Required';\r\n        // }else if(!/^(?=.*[A-Z].*[A-Z])(?=.*[!@#$&*])(?=.*[0-9].*[0-9])(?=.*[a-z].*[a-z].*[a-z]).{8}$/i.test(values.password))\r\n        // {\r\n        //     errors.password='Weak password'\r\n        // }\r\n        if (values.password !== values.confirm) errors.confirm = 'Password don`t match!!! '\r\n        if (!values.confirm) errors.email = 'Required';\r\n        return errors;\r\n    }\r\n\r\n\r\n    onGetRandomPassword = (ev) => {\r\n        ev.preventDefault()\r\n        const pass = utilService.getRandomPassword()\r\n        this.setState(prevState => ({ signupCred: { ...prevState.signupCred, password: pass, confirm: pass } }))\r\n    }\r\n\r\n\r\n    render() {\r\n        const { isShowPassword } = this.state\r\n        const inputType = (isShowPassword) ? 'text' : 'password';\r\n        return (\r\n            <>\r\n                <div className=\"main-login-signup-container\">\r\n                    <HomeHeader />\r\n                    <div className=\"inner-login-signup-container\">\r\n                        <h2>Let's get started!</h2>\r\n                        <h3>Sign up</h3>\r\n                        <Formik\r\n                            enableReinitialize={true}\r\n                            initialValues={this.state.signupCred}\r\n                            validate={this.validate}\r\n                            onSubmit={this.onSignUp}>\r\n                            {() => (\r\n                                <Form className=\"sunday-form signup-fields-arranegment\">\r\n                                    <div>\r\n                                        <Field placeholder=\"Username\" autoFocus type=\"text\" name=\"username\" autoComplete=\"off\" required as={TextField} />\r\n                                        <ErrorMessage name=\"fullname\" className=\"err-msg\" />\r\n                                    </div>\r\n                                    <div>\r\n                                        <Field required placeholder=\"Fullname\" type=\"text\" name=\"fullname\" as={TextField} />\r\n                                        <ErrorMessage name=\"fullname\" className=\"err-msg\" />\r\n                                    </div>\r\n                                    <div className=\"password-container\">\r\n                                        <div className=\"relative password-inner-container\">\r\n                                            <Field placeholder=\"Password\" type={inputType} name=\"password\" as={TextField} />\r\n                                            <ErrorMessage name=\"password\" className=\"err-msg\" />\r\n                                            {!isShowPassword && <Visibility onClick={() => this.onTogglePassword()} />}\r\n                                            {isShowPassword && <VisibilityOff onClick={() => this.onTogglePassword()} />}\r\n                                        </div>\r\n                                        <div className=\"password-inner-container\">\r\n                                            <Field placeholder=\"Confirm password\" type=\"password\" name=\"confirm\" as={TextField} />\r\n                                            <ErrorMessage name=\"confirm\" className=\"err-msg\" />\r\n                                        </div>\r\n                                        <button onClick={(ev) => this.onGetRandomPassword(ev)}>\r\n                                            Get strong password\r\n                                    </button>\r\n                                    </div>\r\n                                    <div>\r\n                                        <Field placeholder=\"Email\" type=\"email\" name=\"email\" as={TextField} />\r\n                                        <ErrorMessage name=\"email\" className=\"err-msg\" />\r\n                                    </div>\r\n                                    <button className=\"login-signup-btn\" type=\"submit\">Sign up</button>\r\n\r\n                                </Form>\r\n                            )\r\n                            }\r\n                        </Formik>\r\n                        <Link to=\"/login\">Already have an account? <b>Log in</b></Link>\r\n                    </div>\r\n                </div >\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nconst mapGlobalStateToProps = (state) => {\r\n    return {\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    signup\r\n\r\n}\r\nexport const SignUp = connect(mapGlobalStateToProps, mapDispatchToProps)(_SignUp)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/sunday-icon.c383b665.svg\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport { utilService } from \"../../services/utilService\"\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport moment from 'moment'\r\nimport DeleteOutlineOutlinedIcon from '@material-ui/icons/DeleteOutlineOutlined';\r\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\r\nimport { userService } from \"../../services/userService\";\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    typography: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nexport function UserNotifications({ notifications, onCleanNotifications, onUpdateNotifications }) {\r\n  \r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const open = Boolean(anchorEl);\r\n    const id = open ? 'notifications-popover' : undefined;\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"relative\">\r\n                {notifications && <span className=\"count-notifications\">{notifications.length}</span>}\r\n                <NotificationsNoneIcon data-tip data-for=\"notifications\" aria-describedby={id} onClick={handleClick} />\r\n            </div>\r\n            <Popover\r\n                id={id}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'center',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <section className=\"user-notifications\">\r\n                    <header className=\"flex space-between align-center\">\r\n                        {notifications?.length ?\r\n                            (<>\r\n                                <h1>Notifications</h1>\r\n                                <DeleteOutlineOutlinedIcon onClick={onCleanNotifications} />\r\n                            </>)\r\n                            : (<h1>You have no notifications</h1>)}\r\n\r\n                    </header>\r\n                    {notifications?.length > 0 && (notifications.map((notification, idx) => {\r\n\r\n                        return <div key={idx} className=\"notification-details\">\r\n                            <div className=\"flex\">\r\n                                {notification.byMember.imgUrl ? <img src={notification.byMember.imgUrl} className=\"user-thumbnail\" alt=\"\" /> :\r\n                                    <span className=\"user-thumbnail\">{utilService.getNameInitials(notification.byMember.fullname)}</span>\r\n                                }\r\n                                <p>{notification?.notificationTxt}</p>\r\n                            </div>\r\n                            <div className=\"time flex\"> <AccessTimeIcon /><h4>{moment(notification.createdAt).from(Date.now())}</h4></div>\r\n                        </div>\r\n                    })\r\n                    )}\r\n                </section>\r\n            </Popover>\r\n            <ReactTooltip className=\"sunday-tooltip\" id=\"notifications\" place=\"right\" effect=\"solid\">\r\n                Notifications\r\n      </ReactTooltip>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport default function SimplePopover() {\r\n}","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport sundayIcon from \"../assets/img/sunday-icon.svg\"\r\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport { UserNotifications } from \"./user/UserNotifications.jsx\"\r\n\r\nexport class MainSideBar extends Component {\r\n    state = {\r\n        isShowUserNotification: false\r\n    }\r\n    onToggleUserNotifications = () => {\r\n        this.setState({ isShowUserNotification: !this.state.isShowUserNotification })\r\n    }\r\n    render() {\r\n        const { onLogOut, user, onCleanNotifications,onUpdateNotifications } = this.props;\r\n        const notifications = user.notifications?.filter(notification => !notification.isRead)\r\n\r\n        return <div className=\"main-sidebar-inner-container flex column\">\r\n            <div className=\"main-side-bar-top flex column align-center\">\r\n                <Link to=\"/\">\r\n                    <img className=\"sunday-icon\" src={sundayIcon} alt=\"sunday-logo-icon\" />\r\n                </Link>\r\n                <UserNotifications notifications={notifications} onCleanNotifications={onCleanNotifications}/>\r\n                {/* <div className=\"relative\">\r\n                    {user.notifications && <span className=\"count-notifications\">{notifications.length}</span>}\r\n                    <NotificationsNoneIcon data-tip data-for=\"notifications\" onClick={this.onToggleUserNotifications} />\r\n                </div> */}\r\n                    {/* {this.state.isShowUserNotification && <UserNotification notifications={user.notifications} onCleanNotifications={onCleanNotifications} user={user} onUpdateNotifications={onUpdateNotifications} onToggleUserNotifications={this.onToggleUserNotifications} />} */}\r\n\r\n                <Link to={`/user/${user._id}/general`}>\r\n                    <div className=\"greet-user\">\r\n                        <span>Hello {user.fullname}</span>\r\n                    </div>\r\n                </Link>\r\n            </div>\r\n            <div className=\"main-side-bar-bottom flex column align-center\">\r\n                <Link to={`/user/${user._id}/general`}>\r\n                    <PersonOutlineIcon data-tip data-for=\"myAccount\" />\r\n                </Link>\r\n                <ExitToAppIcon data-tip data-for=\"logOut\" onClick={onLogOut} />\r\n            </div>\r\n\r\n            <ReactTooltip className=\"sunday-tooltip\" id=\"myAccount\" place=\"right\" effect=\"solid\">\r\n                My Account\r\n      </ReactTooltip>\r\n            <ReactTooltip className=\"sunday-tooltip\" id=\"logOut\" place=\"right\" effect=\"solid\" >\r\n                Log Out\r\n      </ReactTooltip>\r\n        </div >\r\n    }\r\n}\r\n","\r\nimport { Component } from 'react'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nexport class BoardSearch extends Component {\r\n\r\n    state = {\r\n        txt: ''\r\n    }\r\n\r\n    handelChange = (ev) => {\r\n        const { value } = ev.target\r\n        this.setState({ txt: value }, () => this.props.onSetFilter(this.state.txt));\r\n    };\r\n\r\n    render() {\r\n        return <>\r\n            <section className=\"search-field\">\r\n                <SearchIcon />\r\n                <input id=\"standard-basic\" label=\"Search\" name=\"txt\" value={this.state.txt}\r\n                    onChange={this.handelChange} autoComplete=\"off\" placeholder=\"Search Board\" />\r\n            </section>\r\n            <div></div>\r\n        </>\r\n    }\r\n\r\n\r\n}","import React, { Component } from 'react'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport Button from '@material-ui/core/Button';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nexport class ConfirmModal extends Component {\r\n  state = {\r\n    mounted: false\r\n  }\r\n  componentDidMount() {\r\n    this.setState({ mounted: true })\r\n  }\r\n  onClose = () => {\r\n    this.setState({ mounted: false })\r\n  }\r\n  render() {\r\n    const { mounted } = this.state\r\n    const { title, type, id, arg } = this.props\r\n    return (\r\n      <div className=\"modal-wrapper\" onClick={this.onClose}>\r\n        <CSSTransition in={mounted} classNames=\"fade\" timeout={200} onExited={this.props.close}>\r\n          <div className=\"modal-content\" onClick={ev => ev.stopPropagation()}>\r\n            <h3>{`Are you sure You want to delete this ${type}?`}</h3>\r\n            <p>{`(${title})`}</p>\r\n            <div className=\"btn-confirm\">\r\n\r\n              <Button\r\n                onClick={() => {\r\n                  this.onClose()\r\n                  this.props.delete(id, arg)\r\n                }}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                startIcon={<DeleteIcon />}\r\n              >\r\n                Delete\r\n      </Button>\r\n      <Button\r\n      onClick={this.onClose}\r\n        variant=\"contained\"\r\n        color=\"default\"\r\n      >\r\n        Cancel\r\n      </Button>\r\n             \r\n            </div>\r\n          </div>\r\n        </CSSTransition>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { useState } from 'react'\r\nimport { ConfirmModal } from './ConfirmModal';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const BoardSideBarItem = ({ board, onDeleteBoard, user, idx }) => {\r\n\r\n    const [isDelete, setIsDelete] = useState(false)\r\n\r\n    return (\r\n        <div className=\"board-sidebar-row\">\r\n            <Link to={`/board/${board._id}`}>{board.title}</Link>\r\n            {(user._id === board.createdBy._id) && <DeleteIcon onClick={() => setIsDelete(true)} />}\r\n            {isDelete && <ConfirmModal id={board._id} arg={idx}\r\n                delete={onDeleteBoard} close={() => setIsDelete(false)} title={board.title} type={'Board'} />}\r\n        </div>\r\n    )\r\n}\r\n","import AddIcon from '@material-ui/icons/Add';\r\nimport { Component } from 'react'\r\nimport { BoardSearch } from './BoardSearch';\r\nimport { TextField } from '@material-ui/core';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport { BoardSideBarItem } from './BoardSideBarItem';\r\n\r\nexport class BoardSideBar extends Component {\r\n\r\n    state = {\r\n        isAddBoard: false,\r\n        boardTitle: '',\r\n        isDelete: false,\r\n        txt: ''\r\n    }\r\n\r\n\r\n    onInputChange = (ev) => {\r\n        const value = ev.target.value;\r\n        this.setState({ boardTitle: value });\r\n    };\r\n\r\n    onAddBoard = (ev) => {\r\n        ev.preventDefault()\r\n        if (!this.state.boardTitle) return\r\n        this.props.onAddBoard(this.state.boardTitle)\r\n        this.setState({ isAddBoard: false, boardTitle: '' })\r\n    }\r\n\r\n    toggleEditBoard = () => {\r\n        this.setState({ isAddBoard: !this.state.isAddBoard });\r\n    }\r\n\r\n    render() {\r\n\r\n        const { boards, onDeleteBoard, user, onSetFilter } = this.props;\r\n        const { boardTitle } = this.state\r\n        return (\r\n            <section className=\"board-side-bar\">\r\n                <div className=\"main-workspace-title flex\">\r\n                    <span className=\"letter flex\">\r\n                        <span>M</span>\r\n                        <HomeIcon />\r\n                    </span>\r\n                    <span>Main workspace</span>\r\n                </div>\r\n                <div className=\"board-sidebar-controlles\">\r\n                    <BoardSearch onSetFilter={onSetFilter} />\r\n                    {!this.state.isAddBoard && <span className=\"board-sidebar-action-btn\" onClick={this.toggleEditBoard}><AddIcon />Add</span>}\r\n                    {this.state.isAddBoard &&\r\n                        <form onSubmit={this.onAddBoard}>\r\n                            <TextField placeholder=\" Board Name\" autoFocus type=\"text\" autoComplete=\"off\"\r\n                                value={boardTitle} onChange={this.onInputChange} />\r\n                        </form>\r\n                    }\r\n                </div>\r\n                <div>\r\n                    <h3 className=\"board-sidebar-title\" >My boards</h3>\r\n                    <div>\r\n                        {boards.map((board, idx) => {\r\n                            return <BoardSideBarItem\r\n                                key={board._id}\r\n                                idx={idx}\r\n                                user={user}\r\n                                board={board}\r\n                                onDeleteBoard={onDeleteBoard}\r\n                            />\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </section >\r\n\r\n        )\r\n    }\r\n}\r\n","import 'react-dates/initialize';\r\nimport 'react-dates/lib/css/_datepicker.css';\r\nimport { DayPickerRangeController } from 'react-dates';\r\n\r\nimport React, { Component } from 'react'\r\n\r\nexport class DatePicker extends Component {\r\n\r\n  state = {\r\n    startDate: null,\r\n    endDate: null,\r\n    focusedInput: 'startDate'\r\n  }\r\n\r\n  handleChange = () => {\r\n    const { startDate, endDate, focusedInput } = this.state\r\n    if (startDate?._d && endDate?._d) this.props.changeDates({ startDate: startDate?._d, endDate: endDate?._d })\r\n    if (startDate?._d && !endDate?._d && !focusedInput) {\r\n      this.props.changeDates({ startDate: startDate?._d, endDate: null })\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { startDate, endDate, focusedInput } = this.state\r\n    if (startDate?._d && !endDate?._d && !focusedInput) {\r\n      this.props.changeDates({ startDate: startDate?._d, endDate: null })\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const { /* startDate, endDate, cardId, */ closeDatePicker } = this.props\r\n    return (\r\n      <div className=\"datePicker\">\r\n          <DayPickerRangeController\r\n            startDate={this.state.startDate} // momentPropTypes.momentObj or null,\r\n            endDate={this.state.endDate} // momentPropTypes.momentObj or null,\r\n            isOutsideRange={() => false}\r\n            onDatesChange={({ startDate, endDate }) => this.setState({ startDate, endDate }, this.handleChange)}\r\n            focusedInput={this.state.focusedInput}\r\n            hideKeyboardShortcutsPanel={true}\r\n            onFocusChange={focusedInput => {\r\n              this.setState({ focusedInput })\r\n            }}\r\n          />\r\n          <button className=\"date-btn\" onClick={()=>this.setState({focusedInput:null},closeDatePicker)}>Close</button>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport class EditableElement extends Component {\r\n\r\n\r\n    state = {\r\n        title: this.props.children,\r\n        isEdit: true\r\n    }\r\n    handleChange = (ev) => {\r\n        const title = ev.currentTarget.innerText\r\n        this.setState({ title })\r\n    }\r\n\r\n    checkKey = async (ev) => {\r\n        if ((ev.key === 'Enter' || ev.type === 'blur')/* &&this.state.title!==this.props.children */) {\r\n            this.setState({ isEdit: false })\r\n            const title = (this.state.title) ? this.state.title : 'New Title'\r\n            setTimeout(() => {\r\n                this.setState({ isEdit: true })\r\n                this.props.onChangeTitle(title)\r\n            }, 200)\r\n        }\r\n    }\r\n    render() {\r\n        const { isEdit } = this.state\r\n        return (\r\n            <>\r\n                <div onKeyDown={this.checkKey}\r\n                    className=\"editable-element\"\r\n                    onBlur={this.checkKey}\r\n                    contentEditable={isEdit}\r\n                    suppressContentEditableWarning={true}\r\n                    spellCheck=\"false\"\r\n                    onInput={this.handleChange}\r\n                >{this.props.children}</div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n// import ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\n\r\n\r\nexport class Colors extends Component {\r\n\r\n    changeColor = (color) => {\r\n        const { onChangeColor, data } = this.props;\r\n        data ? onChangeColor(color, data) : onChangeColor(color);\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"edit-colors\">\r\n            <span onClick={() => this.changeColor('#FF6E6E')} style={{ backgroundColor: \"#FF6E6E\" }}></span>\r\n            <span onClick={() => this.changeColor('#fb275d')} style={{ backgroundColor: \"#fb275d\" }}></span>\r\n            <span onClick={() => this.changeColor('#FF642E')} style={{ backgroundColor: \"#FF642E\" }}></span>\r\n            <span onClick={() => this.changeColor('#037F4C')} style={{ backgroundColor: \"#037F4C\" }}></span>\r\n            <span onClick={() => this.changeColor('#00ca72')} style={{ backgroundColor: \"#00ca72\" }}></span>\r\n            <span onClick={() => this.changeColor('#61BD4F')} style={{ backgroundColor: \"#61BD4F\" }}></span>\r\n            <span onClick={() => this.changeColor('#df5e88')} style={{ backgroundColor: \"#df5e88\" }}></span>\r\n            <span onClick={() => this.changeColor('#ffcc00')} style={{ backgroundColor: \"#ffcc00\" }}></span>\r\n            <span onClick={() => this.changeColor('#41EAD4')} style={{ backgroundColor: \"#41EAD4\" }}></span>\r\n            <span onClick={() => this.changeColor('#e1ccec')} style={{ backgroundColor: \"#f09ae9\" }}></span>\r\n            <span onClick={() => this.changeColor('#dddddd')} style={{ backgroundColor: \"#dddddd\" }}></span>\r\n            <span onClick={() => this.changeColor('#7F5347')} style={{ backgroundColor: \"#7F5347\" }}></span>\r\n            <span onClick={() => this.changeColor('#784BD1')} style={{ backgroundColor: \"#784BD1\" }}></span>\r\n            <span onClick={() => this.changeColor('#0086C0')} style={{ backgroundColor: \"#0086C0\" }}></span>\r\n            <span onClick={() => this.changeColor('#0085ff')} style={{ backgroundColor: \"#0085ff\" }}></span>\r\n            <span onClick={() => this.changeColor('#3D315B')} style={{ backgroundColor: \"#3D315B\" }}></span>\r\n        </div>\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport { Colors } from './Colors';\r\nimport { TextField } from '@material-ui/core';\r\n\r\n\r\nexport class LabelMenu extends Component {\r\n\r\n    state = {\r\n        currLabel: null,\r\n        isOpen: false,\r\n        isAddLabelOpen: false,\r\n        isColorPalletteOpen: false,\r\n        showAddLabelError: false,\r\n        newLabel: {\r\n            text: '',\r\n            color: null\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.setState({ newLabel: { text: '', color: null } });\r\n    }\r\n\r\n\r\n    toggleMenu = () => {\r\n        const { isOpen } = this.state;\r\n        this.setState({ isOpen: !isOpen });\r\n    }\r\n\r\n    toggleAddNewLabel = () => {\r\n        const { isAddLabelOpen } = this.state;\r\n        this.setState({ isAddLabelOpen: !isAddLabelOpen });\r\n    }\r\n    toggleAddLabelError = () => {\r\n        this.setState({ showAddLabelError: true }, () => {\r\n            setTimeout(() => {\r\n                this.setState({ showAddLabelError: false });\r\n            }, 1500);\r\n        });\r\n    }\r\n\r\n    setCurrLabel = (newLabel) => {\r\n        const { currLabel } = this.props\r\n        if (currLabel.text === newLabel.text) {\r\n            this.toggleMenu();\r\n            return\r\n        }\r\n        this.setState({ currLabel: newLabel }, () => {\r\n            this.props.onSaveLabel(newLabel, this.props.labelName);\r\n            this.toggleMenu();\r\n        });\r\n    }\r\n\r\n    setNewLabelColor = (color) => {\r\n        const { newLabel } = this.state\r\n        newLabel.color = color;\r\n        this.setState({ newLabel })\r\n    }\r\n\r\n    addLabel = (ev) => {\r\n        ev.preventDefault();\r\n        const { onAddLabel, labelGroup } = this.props;\r\n        const { newLabel } = this.state;\r\n        if (!newLabel.text || !newLabel.color) {\r\n            this.toggleAddLabelError();\r\n            return;\r\n        }\r\n        onAddLabel(newLabel, labelGroup);\r\n        this.toggleAddNewLabel();\r\n    }\r\n\r\n    handleInput = (ev) => {\r\n        const { name, value } = ev.target\r\n        const { newLabel } = this.state;\r\n        newLabel[name] = value;\r\n        this.setState({ newLabel })\r\n    }\r\n\r\n    render() {\r\n        const { labels, currLabel, enableAdding } = this.props;\r\n        const { isAddLabelOpen, isOpen, showAddLabelError, newLabel } = this.state;\r\n        return <div className=\"labels-menu-container\">\r\n            <div className=\"labels-menu-chosen-item\" onClick={this.toggleMenu} style={{ backgroundColor: currLabel.color }}>\r\n                {currLabel.text}\r\n                <span className=\"fold\"></span>\r\n            </div>\r\n            {isOpen &&\r\n                <ClickAwayListener onClickAway={this.toggleMenu}>\r\n                    <div onBlur={this.toggleMenu} className=\"labels-menu-floating-container\">\r\n                        <div className=\"labels-grid\">\r\n                            {labels.map((label, idx) => {\r\n                                return <div key={idx} className=\"labels-menu-item\" onClick={() => this.setCurrLabel(label)}\r\n                                    style={{ backgroundColor: label.color }}>\r\n                                    {label.text}\r\n                                </div>\r\n                            })}\r\n                            {enableAdding &&\r\n                                <div className=\"labels-menu-item new-label\" onClick={this.toggleAddNewLabel}>\r\n                                    Add {this.props.labelName}\r\n                                </div>}\r\n                        </div>\r\n                        {(isAddLabelOpen && enableAdding) && <div className=\"add-new-label-container\">\r\n                            <div className=\"flex space-between\">\r\n                                <span onClick={this.toggleAddNewLabel}>Cancel</span>\r\n                                <span onClick={this.addLabel}>Save</span>\r\n                            </div>\r\n                            <form onSubmit={this.addLabel} className=\"relative\">\r\n                                <span style={{ backgroundColor: `${newLabel.color ? newLabel.color : ''}` }} className=\"color-preview\"></span>\r\n                                <TextField name=\"text\" autoComplete=\"off\" placeholder={showAddLabelError ? \"Please enter label + color\" : \"Enter label\"} onChange={this.handleInput} />\r\n                            </form>\r\n                            <Colors onChangeColor={this.setNewLabelColor} />\r\n                        </div>}\r\n\r\n                    </div>\r\n                </ClickAwayListener>\r\n            }\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst ChatBubble = () => {\r\n    return (\r\n        <svg id=\"Capa_1\" enableBackground=\"new 0 0 511.072 511.072\" height=\"512\" viewBox=\"0 0 511.072 511.072\" width=\"512\" xmlns=\"http://www.w3.org/2000/svg\"><g id=\"Speech_Bubble_48_\"><g><path d=\"m74.39 480.536h-36.213l25.607-25.607c13.807-13.807 22.429-31.765 24.747-51.246-36.029-23.644-62.375-54.751-76.478-90.425-14.093-35.647-15.864-74.888-5.121-113.482 12.89-46.309 43.123-88.518 85.128-118.853 45.646-32.963 102.47-50.387 164.33-50.387 77.927 0 143.611 22.389 189.948 64.745 41.744 38.159 64.734 89.63 64.734 144.933 0 26.868-5.471 53.011-16.26 77.703-11.165 25.551-27.514 48.302-48.593 67.619-46.399 42.523-112.042 65-189.83 65-28.877 0-59.01-3.855-85.913-10.929-25.465 26.123-59.972 40.929-96.086 40.929zm182-420c-124.039 0-200.15 73.973-220.557 147.285-19.284 69.28 9.143 134.743 76.043 175.115l7.475 4.511-.23 8.727c-.456 17.274-4.574 33.912-11.945 48.952 17.949-6.073 34.236-17.083 46.99-32.151l6.342-7.493 9.405 2.813c26.393 7.894 57.104 12.241 86.477 12.241 154.372 0 224.682-93.473 224.682-180.322 0-46.776-19.524-90.384-54.976-122.79-40.713-37.216-99.397-56.888-169.706-56.888z\" /></g></g></svg>\r\n    )\r\n}\r\n\r\nexport default ChatBubble;","import { Link } from 'react-router-dom'\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { utilService } from '../services/utilService.js';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\n\r\n\r\nexport function TaskMembersModal({ boardMembers, cardMembers, changeTaskMembers, onCloseModal}) {\r\n\r\n    return (<ClickAwayListener onClickAway={onCloseModal}>\r\n        <div className=\"members-modal-basic\" >\r\n            <div>\r\n                <h3 className=\"members-modal-task-members-title\">Task Members</h3>\r\n                {cardMembers.map(member => {\r\n                    return <div key={member._id} className=\"flex align-center space-between member-row\">\r\n                        <Link to={`/user/${member._id}/general`} >\r\n                            <div className=\"flex align-center\">\r\n                                {member.imgUrl ? <img src={member.imgUrl} className=\"user-thumbnail\" alt=\"\" />\r\n                                    : <h5 className=\"user-thumbnail \">\r\n                                        {utilService.getNameInitials(member.fullname)}</h5>}\r\n                                <span className=\"modal-user-full-name\">{member.fullname}</span>\r\n                            </div>\r\n                        </Link>\r\n                        < RemoveIcon onClick={() => changeTaskMembers(member._id, 'remove')} className=\"remove-icon\" />\r\n                    </div>\r\n                })}\r\n            </div>\r\n            <div>\r\n                <h3>Board Members</h3>\r\n                {boardMembers.map(member => {\r\n                    return <div key={member._id} className=\"flex align-center space-between member-row\">\r\n                        <Link to={`/user/${member._id}/general`} >\r\n                            <div className=\"flex align-center\">\r\n                                {member.imgUrl ? <img src={member.imgUrl} className=\"user-thumbnail\" alt=\"\" />\r\n                                    : <h5 className=\"user-thumbnail\">\r\n                                        {utilService.getNameInitials(member.fullname)}</h5>}\r\n                                <span className=\"modal-user-full-name\">{member.fullname}</span>\r\n                            </div>\r\n                        </Link>\r\n                        <AddIcon onClick={() => changeTaskMembers(member._id,  'add' )} className=\"remove-icon\" />\r\n                    </div>\r\n                })}\r\n            </div>\r\n        </div>\r\n    </ClickAwayListener>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { utilService } from '../services/utilService'\r\n\r\nexport class ProgressBar extends Component {\r\n    state = {\r\n\r\n    }\r\n\r\n    checkDueDate = (startDate, endDate) => {\r\n        let progressVal;\r\n        const start = new Date(startDate).getTime()\r\n        const today = new Date().getTime()\r\n        const end = new Date(endDate).getTime()\r\n        if (startDate && endDate && start > today) return 0\r\n        else if (!endDate && startDate && start > today) {\r\n            const { createdAt } = this.props\r\n            const timePassed = Math.abs(today - createdAt)\r\n            progressVal = Math.round(timePassed * 100 / start)\r\n\r\n            return progressVal\r\n        }\r\n        else if (!endDate && startDate && start < today) return 100\r\n\r\n        const timePassed = Math.abs(today - start)\r\n        const range = Math.abs(end - start)\r\n        progressVal = Math.round(timePassed * 100 / range)\r\n        return progressVal\r\n    }\r\n\r\n    render() {\r\n        const { startDate, endDate, groupColor, onOpenPicker } = this.props\r\n        const startMonth = new Date(startDate).getMonth()\r\n        const startDay = new Date(startDate).getDate()\r\n        const startDateForDisplay = utilService.getNameOfMonth(startMonth) + ' ' + startDay\r\n        const endMonth = new Date(endDate).getMonth()\r\n        const endDay = new Date(endDate).getDate()\r\n        const endDateForDisplay = utilService.getNameOfMonth(endMonth) + ' ' + endDay\r\n        let dateRange = endDate ? startDateForDisplay + ' - ' + endDateForDisplay : startDateForDisplay\r\n        let width;\r\n\r\n        if (!startDate && !endDate) {\r\n            dateRange = 'Choose Date'\r\n            width = 0\r\n        } else width = this.checkDueDate(startDate, endDate)\r\n\r\n        return (\r\n            <div onClick={onOpenPicker} className=\"progressbar-container\" style={{ backgroundColor: 'rgb(121 115 115)' }}>\r\n                <div className=\"inner-progressbar\"\r\n                    style={{ backgroundColor: groupColor, width: width + '%' }}>\r\n                    <span style={{ color: groupColor === '#c7c1c1' ? ' #333333' : '#f9f9f9' }}>{dateRange}</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Delete } from '@material-ui/icons';\r\nimport { DatePicker } from './DatePicker';\r\nimport { EditableElement } from './EditableElement';\r\nimport { LabelMenu } from './LabelMenu';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    changeCardTitle,\r\n    loadBoards,\r\n    deleteCard,\r\n    changeTaskMembers,\r\n    changeCardDates,\r\n    changeCardLabels,\r\n    addCardLabel\r\n} from '../store/actions/boardAction'\r\nimport ChatBubble from '../assets/img/ChatBubble.jsx';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport { utilService } from '../services/utilService.js'\r\nimport { TaskMembersModal } from './TaskMembersModal.jsx'\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { ProgressBar } from './ProgressBar';\r\nimport { ClickAwayListener } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom'\r\nimport { setMsg } from '../store/actions/userAction.js'\r\nimport { ConfirmModal } from './ConfirmModal.jsx'\r\n\r\nclass _CardPreview extends Component {\r\n    state = {\r\n        isShowMembers: false,\r\n        isShowDate: false,\r\n        isDelete: false\r\n    }\r\n    onChangeTitle = async (cardTitle) => {\r\n        const { board, changeCardTitle, group, card, loggedInUser } = this.props\r\n        await changeCardTitle({ board: { ...board }, groupId: group.id, cardToUpdate: card, cardTitle, user: loggedInUser })\r\n    }\r\n    onShowConfirmModal = () => {\r\n        this.setState({ isDelete: true })\r\n    }\r\n    onDeleteCard = async (cardId, group) => {\r\n        const { board, deleteCard, loggedInUser } = this.props\r\n        await deleteCard({ groupId: group.id, board, cardId, user: loggedInUser })\r\n        this.props.setMsg('Card  Successfully Removed')\r\n    }\r\n    changeTaskMembers = async (memberId, sign) => {\r\n        const { changeTaskMembers, board, group, card, loggedInUser } = this.props\r\n        await changeTaskMembers(memberId, sign, { ...board }, card, group.id, loggedInUser)\r\n    }\r\n    changeDates = async (dates) => {\r\n        const { changeCardDates, board, group, card, loggedInUser } = this.props\r\n        if (dates.startDate && dates.endDate) {\r\n            changeCardDates(dates, { ...board }, group.id, card, loggedInUser)\r\n        } else if (!dates.endDate) {\r\n            changeCardDates(dates, { ...board }, group.id, card.id, loggedInUser)\r\n        }\r\n        this.closeDatePicker()\r\n    }\r\n    toggleMembersModal = () => {\r\n        const { isShowMembers } = this.state;\r\n        this.setState({ isShowMembers: !isShowMembers })\r\n    }\r\n    changeCardLabels = async (label, labelType) => {\r\n        const { changeCardLabels, board, group, card, loggedInUser } = this.props\r\n        await changeCardLabels({ ...board }, card, group.id, label, labelType, loggedInUser)\r\n    }\r\n    addCardLabel = async (label, labelGroup) => {\r\n        const { addCardLabel, board, group } = this.props\r\n        await addCardLabel({ ...board }, group.id, label, labelGroup)\r\n    }\r\n    closeDatePicker = () => {\r\n        this.setState({ isShowDate: false })\r\n    }\r\n    checkWorkingDays = () => {\r\n        const { endDate, startDate } = this.props.card.dueDate\r\n        let days;\r\n        let diff;\r\n        if (startDate && !endDate) {\r\n            if (new Date(startDate) < new Date()) return '--'\r\n            diff = new Date(startDate) - new Date()\r\n            days = Math.abs(Math.ceil(diff / (1000 * 60 * 60 * 24)))\r\n        } else if (!endDate && !startDate) days = '--'\r\n        else {\r\n            diff = new Date(startDate) - new Date(endDate)\r\n            days = Math.abs(Math.ceil(diff / (1000 * 60 * 60 * 24)))\r\n        }\r\n        return days\r\n    }\r\n    render() {\r\n        const { card, group, board, idx } = this.props\r\n        const boardMembers = board.members.filter(boardMember => {\r\n            if (!card.members.length) return true;\r\n            const mutualMember = card.members.find(member => {\r\n                return member._id === boardMember._id\r\n            });\r\n            if (mutualMember) return false;\r\n            return true;\r\n        })\r\n        const { isShowMembers, isShowDate } = this.state\r\n        const cardMembersForDisplay = (card.members.length > 2) ? card.members.slice(0, 2) : card.members;\r\n        return (\r\n            <>\r\n                <Draggable draggableId={card.id} index={idx}>\r\n                    {(provided, snapshot) => (\r\n                        <div className=\"card-preview\"\r\n                            {...provided.draggableProps}\r\n                            {...provided.dragHandleProps}\r\n                            ref={provided.innerRef}\r\n                        >\r\n                            <div style={{ backgroundColor: group.style.color }}></div>\r\n                            <div className=\"card-title\">\r\n                                <EditableElement onChangeTitle={this.onChangeTitle}>{card.title}</EditableElement>\r\n                                <Delete onClick={this.onShowConfirmModal} />\r\n                            </div>\r\n                            <div>\r\n                                <Link to={`/board/${board._id}/card/${card.id}`}>\r\n                                    <ChatBubble />\r\n                                </Link>\r\n                            </div>\r\n\r\n                            <div className=\"card-members relative\" onClick={this.toggleMembersModal} >\r\n                                {card.members.length >= 3 &&\r\n                                    <span className=\"members-count-badge\"> {`+${card.members.length - 2}`}</span>}\r\n                                <div className={`flex justify-center align-center ${card.members.length >= 2 ? 'multiple-members-display' : ''}`}>\r\n                                    {(!cardMembersForDisplay.length) && <PersonIcon className=\"member-empty-avatar\" />}\r\n                                    {\r\n                                        cardMembersForDisplay.map((member) => (member.imgUrl) ?\r\n                                            <img\r\n                                                key={member._id}\r\n                                                src={member.imgUrl}\r\n                                                className=\"user-thumbnail\"\r\n                                                alt=\"\"\r\n                                            /> :\r\n                                            <h5\r\n                                                style={{ backgroundColor: group.style.color }}\r\n                                                key={member._id}\r\n                                                className=\"user-thumbnail\">\r\n                                                {(utilService.getNameInitials(member.fullname).toUpperCase())}\r\n                                            </h5>)\r\n                                    }\r\n                                </div>\r\n                                {isShowMembers &&\r\n                                    <TaskMembersModal\r\n                                        boardMembers={boardMembers}\r\n                                        cardMembers={card.members}\r\n                                        changeTaskMembers={this.changeTaskMembers}\r\n                                        onCloseModal={this.toggleMembersModal}\r\n                                    />\r\n                                }\r\n                            </div>\r\n\r\n                            <div className=\"card-status\">\r\n                                {card.status.label}\r\n                                <LabelMenu\r\n                                    onAddLabel={this.addCardLabel}\r\n                                    enableAdding={true}\r\n                                    onSaveLabel={this.changeCardLabels}\r\n                                    labelName={'status'}\r\n                                    labelGroup=\"statuses\"\r\n                                    labels={group.statuses}\r\n                                    currLabel={card.status}\r\n                                />\r\n                            </div>\r\n\r\n                            <ClickAwayListener onClickAway={this.closeDatePicker}>\r\n                                <div\r\n                                    className=\"dateRange-container\"\r\n                                    onClick={() => this.setState({ isShowDate: true })}\r\n                                >\r\n                                    <ProgressBar\r\n                                        startDate={card.dueDate.startDate}\r\n                                        endDate={card.dueDate.endDate}\r\n                                        status={card.status}\r\n                                        createdAt={card.createdAt}\r\n                                        groupColor={group.style.color}\r\n                                    />\r\n                                    {isShowDate &&\r\n                                        <DatePicker\r\n                                            changeDates={this.changeDates}\r\n                                            closeDatePicker={this.closeDatePicker}\r\n                                            cardId={card.id}\r\n                                        />\r\n                                    }\r\n                                </div>\r\n                            </ClickAwayListener>\r\n\r\n                            <div className=\"card-workingDays\">{this.checkWorkingDays()}</div>\r\n\r\n                            <div className=\"card-priority\">\r\n                                <LabelMenu\r\n                                    onSaveLabel={this.changeCardLabels}\r\n                                    enableAdding={false}\r\n                                    labelName={'priority'}\r\n                                    labels={group.priorities}\r\n                                    currLabel={card.priority}\r\n                                /></div>\r\n                            <div className=\"card-closer\"></div>\r\n                        </div>\r\n                    )}\r\n                </Draggable>\r\n\r\n                {this.state.isDelete &&\r\n                    <ConfirmModal\r\n                        id={card.id}\r\n                        arg={group}\r\n                        delete={this.onDeleteCard}\r\n                        close={() => this.setState({ isDelete: false })}\r\n                        title={card.title}\r\n                        type={'Card'}\r\n                    />}\r\n            </>\r\n        )\r\n    }\r\n}\r\nconst mapGlobalStateToProps = (state) => {\r\n    return {\r\n        loggedInUser: state.userReducer.loggedInUser,\r\n        board: state.boardReducer.board\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    changeCardTitle,\r\n    deleteCard,\r\n    loadBoards,\r\n    changeTaskMembers,\r\n    changeCardDates,\r\n    changeCardLabels,\r\n    addCardLabel,\r\n    setMsg\r\n}\r\nexport const CardPreview = connect(mapGlobalStateToProps, mapDispatchToProps)(_CardPreview);","import { CardPreview } from \"./CardPreview\";\r\nimport React, { Component } from 'react'\r\nimport { EditableElement } from \"./EditableElement\";\r\nimport { Colors } from \"./Colors.jsx\";\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ArrowDropDownOutlinedIcon from '@material-ui/icons/ArrowDropDownOutlined';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport BorderColorOutlinedIcon from '@material-ui/icons/BorderColorOutlined';\r\nimport SortIcon from '@material-ui/icons/Sort';\r\nimport { boardService } from \"../services/boardService\";\r\nimport { ConfirmModal } from \"./ConfirmModal\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport { utilService } from \"../services/utilService\";\r\nimport DragIndicatorIcon from '@material-ui/icons/DragIndicator';\r\n\r\n\r\n\r\nexport class GroupPreview extends Component {\r\n    state = {\r\n        cardTitle: '',\r\n        placeholder: '+ Add',\r\n        isMenuShown: false,\r\n        isMenuOnHover: false,\r\n        isShowColors: false,\r\n        sortGroupBy: '',\r\n        isShowSortOptions: false,\r\n        isSortActive: false,\r\n        isDelete: false,\r\n        isShowSortModal: false\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (!prevProps.onDrag && this.props.onDrag) this.setState({ sortGroupBy: '' })\r\n    }\r\n\r\n\r\n\r\n    handleChange = (ev) => {\r\n        const { value } = ev.target\r\n        this.setState({ cardTitle: value })\r\n    }\r\n\r\n    onAddCard = async (ev) => {\r\n        ev.preventDefault()\r\n        const { onAddCard, group } = this.props\r\n        if (!this.state.cardTitle || !this.state.cardTitle.replace(/\\s/g, '').length) {\r\n            this.setState({ placeholder: 'Activity required', cardTitle: '' })\r\n            setTimeout(() => this.setState({ placeholder: '+Add Activity' }), 1000)\r\n            return\r\n        }\r\n        onAddCard(this.state.cardTitle, group.id)\r\n        this.setState({ cardTitle: '' })\r\n    }\r\n\r\n    onChangeTitle = (groupTitle) => {\r\n        const { group, onChangeGroupTitle } = this.props\r\n        onChangeGroupTitle(groupTitle, group.id)\r\n    }\r\n    onToggleMenu = () => {\r\n\r\n        this.setState({ isMenuShown: !this.state.isMenuShown }, () => {\r\n            if (this.state.isShowColors) this.toggleColorPallette();\r\n        })\r\n    }\r\n    toggleMenuHover = (toggleValue) => {\r\n        this.setState({ isMenuOnHover: toggleValue });\r\n    }\r\n\r\n    toggleColorPallette = () => {\r\n        this.setState({ isShowColors: !this.state.isShowColors })\r\n    }\r\n    onShowMemuOption = () => {\r\n        this.setState({ isShowSortOptions: !this.state.isShowSortOptions })\r\n    }\r\n\r\n    onSetGroupSort = (sortBy) => {\r\n        this.setState({ sortGroupBy: sortBy, isSortActive: true, isShowSortModal: false })\r\n    }\r\n    onToggleMenuSort = () => {\r\n        this.setState({ isShowSortModal: !this.state.isShowSortModal })\r\n    }\r\n\r\n    getGroupForDisplay = () => {\r\n        const { sortGroupBy } = this.state\r\n        const { group, onDrag } = this.props\r\n        const copyGroup = JSON.parse(JSON.stringify(group))\r\n        let cards;\r\n\r\n        if (sortGroupBy && !onDrag) {\r\n\r\n            if (sortGroupBy === 'name') cards = boardService.sortByTitle(copyGroup.cards)\r\n            else cards = boardService.sortCardByDate(copyGroup.cards)\r\n\r\n            copyGroup.cards = cards\r\n        }\r\n\r\n\r\n        return copyGroup\r\n    }\r\n    get countStatus() {\r\n        const group = this.getGroupForDisplay()\r\n\r\n        var statusCount = group.cards.reduce((acc, card) => {\r\n            // acc[card.status.text] = acc[card.status.text] ? acc[card.status.text] + 1 : 1;\r\n            acc[card.status.text] = acc[card.status.text] ?\r\n                { color: card.status.color, count: acc[card.status.text].count + 1 } : { color: card.status.color, count: 1 };\r\n            return acc;\r\n        }, {})\r\n\r\n        Object.keys(statusCount).forEach(key => {\r\n            // if (key === 'No status yet') statusCount[key].count = 0\r\n            statusCount[key].count = Math.round((statusCount[key].count / group.cards.length) * 100);\r\n        })\r\n        return statusCount\r\n    }\r\n\r\n    onChangeGroupColor = (color, groupId) => {\r\n        const { onChangeGroupColor } = this.props\r\n        this.setState({ isShowColors: false, isMenuShown: false }, () => {\r\n            onChangeGroupColor(color, groupId)\r\n        })\r\n    }\r\n    onShowConfirmModal = () => {\r\n        this.setState({ isDelete: true, isMenuShown: false })\r\n    }\r\n\r\n    render() {\r\n        const { onDeleteCard, onRemoveGroup, idx, onDrag } = this.props\r\n        const group = onDrag ? this.props.group : this.getGroupForDisplay()\r\n        const statusCount = this.countStatus\r\n        const { color } = group.style;\r\n        const { isMenuOnHover } = this.state;\r\n        return (\r\n\r\n            <Draggable draggableId={group.id} index={idx}>\r\n                {(provided) => (\r\n                    <div className=\"group-container flex column\"\r\n                        {...provided.draggableProps}\r\n                        ref={provided.innerRef}>\r\n                        <div className=\"group-header\">\r\n                            <ArrowDropDownOutlinedIcon onMouseEnter={() => this.toggleMenuHover(true)} onMouseLeave={() => this.toggleMenuHover(false)}\r\n                                className=\"group-menu-icon\" style={{\r\n                                    backgroundColor: isMenuOnHover ? '#f9f9f9' : color, color: !isMenuOnHover ?\r\n                                        '#f9f9f9' : color, border: `1px solid ${color}`\r\n                                }}\r\n                                onClick={this.onToggleMenu} />\r\n                            {this.state.isMenuShown && <ClickAwayListener onClickAway={this.onToggleMenu}>\r\n                                <MenuList className=\"group-modal\">\r\n\r\n                                    <MenuItem onClick={this.toggleColorPallette}>\r\n                                        <ListItemIcon>\r\n                                            <BorderColorOutlinedIcon className=\"btn-change-group-color\" />\r\n                                        </ListItemIcon>\r\n                                        <span> Change Group Color</span>\r\n                                    </MenuItem>\r\n\r\n                                    <MenuItem onClick={this.onShowConfirmModal}>\r\n                                        <ListItemIcon >\r\n                                            <DeleteIcon className=\"group-modal-icon\" />\r\n                                        </ListItemIcon>\r\n                                        <span>Delete Group</span>\r\n                                    </MenuItem>\r\n\r\n                                    <MenuItem onClick={this.onToggleMenuSort} className=\"relative\">\r\n                                        <ListItemIcon >\r\n                                            <SortIcon className=\"group-modal-icon\" />\r\n                                        </ListItemIcon>\r\n                                        <span>Sort By</span>\r\n                                    </MenuItem>\r\n\r\n\r\n                                    {this.state.isShowSortModal && <ClickAwayListener onClickAway={this.onToggleMenuSort}>\r\n                                        <MenuList className=\"group-sort-modal\">\r\n\r\n                                            <MenuItem onClick={() => { this.onSetGroupSort('date') }}>\r\n                                                <ListItemIcon>\r\n                                                    <span>Date</span>\r\n                                                </ListItemIcon>\r\n                                            </MenuItem>\r\n\r\n                                            <MenuItem onClick={() => this.onSetGroupSort('name')}>\r\n                                                <ListItemIcon >\r\n                                                    <span>Name</span>\r\n                                                </ListItemIcon>\r\n                                            </MenuItem>\r\n                                        </MenuList>\r\n                                    </ClickAwayListener>\r\n                                    }\r\n                                    {this.state.isShowColors &&\r\n                                        <ClickAwayListener onClickAway={this.toggleColorPallette}>\r\n                                            <Colors onChangeColor={this.onChangeGroupColor} data={group.id} />\r\n                                        </ClickAwayListener>\r\n                                    }\r\n\r\n\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                            }\r\n\r\n\r\n                            {this.state.isDelete && <ConfirmModal id={group}\r\n                                delete={onRemoveGroup} close={() => this.setState({ isDelete: false })} title={group.title} type={'Group'} />}\r\n                            <div className=\"drag-icon\" {...provided.dragHandleProps}>\r\n                                <DragIndicatorIcon />\r\n                            </div>\r\n                            <h2 style={{ color: group.style.color }}><EditableElement onChangeTitle={this.onChangeTitle}>{group.title}</EditableElement></h2>\r\n                            <h4>Members</h4>\r\n                            <h4>Status</h4>\r\n                            <h4 onClick={() => { this.onSetGroupSort('date') }} style={{ cursor: 'pointer' }} data-tip data-for='sort-by-date'>Date range</h4>\r\n                            <h4>Working Days</h4>\r\n                            <h4>Priority</h4>\r\n                            <ReactTooltip className=\"sunday-tooltip\" id=\"sort-by-date\" place=\"top\" effect=\"solid\">Sort By Date</ReactTooltip>\r\n                        </div>\r\n\r\n                        <Droppable droppableId={group.id} isCombineEnabled type='card'>\r\n                            {(provided) => (\r\n                                <div\r\n                                    {...provided.dragHandleProps}\r\n                                    {...provided.droppableProps}\r\n                                    ref={provided.innerRef}>\r\n                                    {provided.placeholder}\r\n\r\n                                    {group.cards.map((card, idx) => {\r\n                                        return (\r\n                                            <CardPreview key={card.id} card={card} idx={idx} group={group} onDeleteCard={onDeleteCard}\r\n                                                cardColor={this.state.cardColor} />\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                        <div className=\"group-bottom-section-input\">\r\n                            <div style={{ backgroundColor: group.style.color }}></div>\r\n                            <form onSubmit={this.onAddCard}>\r\n                                <input className=\"add-card-input\" type=\"text\" placeholder={this.state.placeholder} name=\"activity\"\r\n                                    autoComplete=\"off\" value={this.state.cardTitle} onChange={this.handleChange} />\r\n                            </form>\r\n                            <div style={{ backgroundColor: '#E6E9EF' }}></div>\r\n                        </div>\r\n                        <div className=\"group-bottom-section-utils\">\r\n                            <div className=\"progress-status\">\r\n                                {Object.keys(statusCount).map((key, idx) => {\r\n                                    let id = utilService.makeId()\r\n                                    return < div key={idx} style={{ width: statusCount[key].count + '%', background: statusCount[key].color }} data-tip data-for={id}>\r\n                                        <ReactTooltip className=\"sunday-tooltip\" id={id} place=\"bottom\" effect=\"solid\">\r\n                                            <span className=\"tool-tip-txt\"> {`${key} ${Math.floor(statusCount[key].count)}% ${Math.ceil((statusCount[key].count * group.cards.length) / 100)}/${group.cards.length}`}</span>\r\n                                        </ReactTooltip>\r\n                                    </div>\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n                }\r\n            </Draggable>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport ReactTooltip from 'react-tooltip'\r\n\r\nexport function FilterOptions({ labels, onSetFilterLabels, content }) {\r\n    return (\r\n        <div>\r\n            {Object.keys(labels).map((key, idx) => {\r\n                return < div key={idx} data-tip data-for={`${content}${key}`}\r\n                    className={`item ${labels[key].isSelect ? 'selected' : ''}`} onClick={() => onSetFilterLabels(content, key)}>\r\n                    <span className=\"status-circle\" style={{ background: labels[key].color }}></span>\r\n                    <span>{key}</span>\r\n                    <ReactTooltip className=\"sunday-tooltip\" id={`${content}${key}`} place=\"bottom\" effect=\"solid\">\r\n                        {`${content.charAt(0).toUpperCase()+content.substring(1)} is ${key}`}\r\n                    </ReactTooltip>\r\n                </div>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { ClickAwayListener } from '@material-ui/core';\r\nimport { utilService } from '../services/utilService';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport { FilterOptions } from './FilterOptions';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport SwapVertIcon from '@material-ui/icons/SwapVert';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nexport class BoardFilter extends Component {\r\n    state = {\r\n        filterBy: {\r\n            txt: '',\r\n            membersId: [],\r\n            status: [],\r\n            priority: [],\r\n            sortBy: '',\r\n            statusesForDisplay: null,\r\n            priorityForDisplay: null\r\n        },\r\n        isShowMenuFilter: false,\r\n        isMobileFiltersOpen: false\r\n    }\r\n    componentDidMount() {\r\n        this.setStatuses()\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.board !== this.props.board) this.setStatuses()\r\n    }\r\n    handelChange = (ev) => {\r\n        const value = ev.target.value\r\n        const filterBy = { ...this.state.filterBy }\r\n        filterBy[ev.target.name] = value;\r\n        this.setState({ filterBy }, () => this.props.onSetFilter(this.state.filterBy));\r\n    }\r\n    cleanInput = () => {\r\n        const copyFilter = { ...this.state.filterBy }\r\n        copyFilter.txt = '';\r\n        this.setState({ filterBy: copyFilter }, () => this.props.onSetFilter({ ...this.state.filterBy }))\r\n    }\r\n    onCloseFilterMenu = () => {\r\n        this.setState({ isShowMenuFilter: !this.state.isShowMenuFilter })\r\n    }\r\n    onSetFilterLabels = (label, text) => {\r\n        const copyFilter = { ...this.state.filterBy }\r\n        if (copyFilter[label].includes(text)) {\r\n            const newLabels = copyFilter[label].filter(label => label !== text)\r\n            copyFilter[label] = newLabels\r\n        }\r\n        else copyFilter[label] = [...copyFilter[label], text]\r\n        const copyStatusForDispaly = { ...this.state.statusesForDisplay }\r\n        const copyPriorityForDisplay = { ...this.state.priorityForDisplay }\r\n        if (label === 'status') copyStatusForDispaly[text].isSelect = !this.state.statusesForDisplay[text].isSelect\r\n        if (label === 'priority') copyPriorityForDisplay[text].isSelect = !this.state.priorityForDisplay[text].isSelect\r\n        this.setState({ filterBy: copyFilter, statusesForDisplay: copyStatusForDispaly, priorityForDisplay: copyPriorityForDisplay },\r\n            () => this.props.onSetFilter({ ...this.state.filterBy }))\r\n    }\r\n\r\n    onSetFilter = (ev) => {\r\n        const { value, name } = ev.target\r\n        const filterBy = { ...this.state.filterBy }\r\n        filterBy[name] = value;\r\n        this.setState({ filterBy }, () => this.props.onSetFilter({ ...this.state.filterBy }));\r\n    }\r\n\r\n    onGetMember = (memberId) => {\r\n        const copyFilter = { ...this.state.filterBy }\r\n        if (copyFilter.membersId.includes(memberId)) {\r\n            const newMmbers = copyFilter.membersId.filter(member => member !== memberId)\r\n            copyFilter.membersId = newMmbers\r\n        }\r\n        else copyFilter.membersId = [...copyFilter.membersId, memberId]\r\n        this.setState({ filterBy: copyFilter }, () => this.props.onSetFilter({ ...this.state.filterBy }))\r\n    }\r\n\r\n    toggleMobileFilters = () => {\r\n        const { isMobileFiltersOpen } = this.state;\r\n        this.setState({ isMobileFiltersOpen: !isMobileFiltersOpen });\r\n    }\r\n\r\n\r\n    setStatuses() {\r\n        const { board } = this.props\r\n        for (let i = 0; i < 2; i++) {\r\n            var labels = {};\r\n            let key = i === 0 ? 'statuses' : 'priorities'\r\n            board.groups.forEach(group => {\r\n                var currGroup = group[key].reduce((acc, status) => {\r\n                    acc[status.text] = { color: status.color, isSelect: false };\r\n                    return acc;\r\n                }, {})\r\n                labels = { ...labels, ...currGroup }\r\n            })\r\n            if (i === 0) this.setState({ statusesForDisplay: labels })\r\n            else this.setState({ priorityForDisplay: labels })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { isShowMenuFilter, statusesForDisplay, priorityForDisplay, isMobileFiltersOpen } = this.state\r\n        if (!statusesForDisplay || !priorityForDisplay) return null\r\n        const boardFilter = <section className=\"board-filter\">\r\n            <div className=\"search-field\">\r\n                <SearchIcon />\r\n                <input type=\"text\" placeholder=\"Search\" name=\"txt\" value={this.state.filterBy.txt} onChange={this.handelChange} autoComplete=\"off\" />\r\n                {/* <button className=\"clean-input-btn\" onClick={() => this.cleanInput()}>x</button> */}\r\n            </div>\r\n            <span className=\"clickable-filter-category\" onClick={this.onCloseFilterMenu}><FilterListIcon /> Filter</span>\r\n            {isShowMenuFilter && <ClickAwayListener onClickAway={this.onCloseFilterMenu}>\r\n                <div className=\"relative\">\r\n                    <section className=\"groups-filter\">\r\n                        <div className=\"status-filter\">\r\n                            <div className=\"option-continer\">\r\n                                <h3>Status</h3>\r\n                                <FilterOptions onSetFilterLabels={this.onSetFilterLabels} content='status' labels={statusesForDisplay} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"member-filter\">\r\n                            <div className=\"option-continer\">\r\n                                <h3>Member</h3>\r\n                                {this.props.board.members.map(member => {\r\n                                    return <div className=\"item\" key={member._id} onClick={() => this.onGetMember(member._id)} data-tip data-for={member.fullname}>\r\n                                        {(member.imgUrl) ? <img className=\"user-thumbnail\" src={member.imgUrl} alt=\"\" /> : <h5 className=\"user-thumbnail\">{(utilService.getNameInitials(member.fullname).toUpperCase())}</h5>}\r\n                                        <span>{member.fullname}</span>\r\n                                        <ReactTooltip className=\"sunday-tooltip\" id={member.fullname} place=\"bottom\" effect=\"solid\">\r\n                                            {`Member is ${member.fullname}`}\r\n                                        </ReactTooltip>\r\n                                    </div>\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"priority-filter\">\r\n                            <div className=\"option-continer\">\r\n                                <h3>Priority</h3>\r\n                                <FilterOptions onSetFilterLabels={this.onSetFilterLabels} content='priority' labels={priorityForDisplay} />\r\n                            </div>\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n            </ClickAwayListener>\r\n            }\r\n            <div className=\"clickable-filter-category select-with-icon\">\r\n                <select className=\"clickable-filter-category\" onChange={this.onSetFilter} name=\"sortBy\"  >\r\n                    <option value=\"sort\">Sort</option>\r\n                    <option value=\"name\">Name</option>\r\n                    <option value=\"date\">Date</option>\r\n                </select>\r\n                <SwapVertIcon />\r\n            </div>\r\n        </section>\r\n\r\n\r\n        return <React.Fragment>\r\n            <div className=\"board-filter-wrapper-desktop\">\r\n                {boardFilter}\r\n            </div>\r\n            {isMobileFiltersOpen && <ClickAwayListener onClickAway={this.toggleMobileFilters}>\r\n                <div className=\"board-filter-wrapper-mobile\">\r\n                    {boardFilter}\r\n                </div>\r\n            </ClickAwayListener>\r\n            }\r\n            <div className=\"filter-menu-mobile\">\r\n                <MoreVertIcon onClick={this.toggleMobileFilters} />\r\n            </div>\r\n\r\n        </React.Fragment>\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport { Link } from 'react-router-dom'\r\nimport { utilService } from '../services/utilService.js';\r\nimport { ClickAwayListener } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { query } from '../store/actions/userAction'\r\nimport { BoardSearch } from './BoardSearch.jsx';\r\n\r\nclass _BoardMembers extends Component {\r\n\r\n    state = {\r\n        users: []\r\n    }\r\n\r\n    onSetFilter = async (txt) => {\r\n        if (!txt) {\r\n            this.setState({ users: [] })\r\n            return;\r\n        }\r\n        const { board, query } = this.props\r\n        const users = await query(txt);\r\n        const usersNotInBoard = users.filter(user => {\r\n            // if (!board.members.length) return true;\r\n            const mutualMember = board.members.find(member => member._id === user._id);\r\n            if (mutualMember) return false;\r\n            return true;\r\n        })\r\n\r\n        this.setState({ users: usersNotInBoard })\r\n    }\r\n\r\n    onChangeBoardMemebrs = (userToUpdate, sign) => {\r\n        const { users } = this.state\r\n        const updatedUsers = users.filter(user => user._id !== userToUpdate._id)\r\n        this.setState({ users: updatedUsers }, () => {\r\n            this.props.onChangeBoardMemebrs(userToUpdate, sign)\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { board, onChangeBoardMemebrs, onCloseModalMembers } = this.props;\r\n        const { users } = this.state;\r\n        return <ClickAwayListener onClickAway={onCloseModalMembers}>\r\n            <div className=\"members-modal-basic\" >\r\n                <div>\r\n                    <h3>Add users to this board</h3>\r\n                    <div>\r\n                        <BoardSearch onSetFilter={this.onSetFilter} />\r\n                    </div>\r\n                    {users.map(user => {\r\n                        return <div key={user._id} className=\"flex align-center space-between member-row\" >\r\n                            <Link to={`/user/${user._id}/general`} >\r\n                                <div className=\"flex align-center space-between\">\r\n                                    {user.imgUrl ? <img src={user.imgUrl} className=\"user-thumbnail\" alt=\"\" /> :\r\n                                        <span className=\"user-thumbnail\">{utilService.getNameInitials(user.fullname)}</span>}\r\n                                    <span className=\"modal-user-full-name\">{user.fullname}</span>\r\n                                </div>\r\n                            </Link>\r\n                            <AddIcon onClick={() => this.onChangeBoardMemebrs(user, 'add')} className=\"remove-icon\" />\r\n                        </div>\r\n                    })}\r\n                </div>\r\n                <div>\r\n                    <h3>Board Members</h3>\r\n                    {board.members.map(member => {\r\n                        return <div key={member._id} className=\"flex align-center space-between member-row\" >\r\n                            <Link to={`/user/${member._id}/general`} >\r\n                                <div className=\"flex align-center space-between\">\r\n                                    {member.imgUrl ? <img src={member.imgUrl} className=\"user-thumbnail\" alt=\"\" /> :\r\n                                        <span className=\"user-thumbnail\">{utilService.getNameInitials(member.fullname)}</span>}\r\n                                    <span className=\"modal-user-full-name\">{member.fullname}</span>\r\n                                </div>\r\n                            </Link>\r\n                            <RemoveIcon onClick={() => onChangeBoardMemebrs(member._id, 'remove')} className=\"remove-icon\" />\r\n                        </div>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </ClickAwayListener>\r\n    }\r\n}\r\n\r\n\r\nconst mapGlobalStateToProps = (state) => {\r\n    return {\r\n        loggedInUser: state.userReducer.loggedInUser,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    query\r\n}\r\n\r\nexport const BoardMembers = connect(mapGlobalStateToProps, mapDispatchToProps)(_BoardMembers)\r\n\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { utilService } from '../services/utilService'\r\nimport moment from 'moment'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nexport const BoardActivities = ({ activityFilterText, activities, content, user, title, clear, handleChange }) => {\r\n\r\n    return <div>\r\n        {title && <div className=\"activity-filter\">\r\n            <h2 className=\"activities-board-title\"><span>{title}</span> Activities</h2>\r\n            <div>\r\n                <div className=\"search-field relative\">\r\n                    <SearchIcon />\r\n                    <input\r\n                        value={activityFilterText}\r\n                        type=\"text\"\r\n                        name=\"activity\"\r\n                        placeholder=\"search\"\r\n                        autoComplete=\"off\"\r\n                        onChange={handleChange} />\r\n                </div>\r\n                <button onClick={clear}>Clear</button>\r\n            </div>\r\n        </div>}\r\n        <span>{content}</span>\r\n        <div className=\"activity-list\">\r\n            {activities.map(activity => {\r\n                return <div key={activity.id} className=\"activity\">\r\n                    <div>\r\n                        <Link to={`/user/${activity.byMember._id}`}>  {activity.byMember.imgUrl ? <img src={activity.byMember.imgUrl} className=\"user-thumbnail\" alt=\"avatar\" /> :\r\n                            <div className=\"user-thumbnail\">{\r\n                                activity.byMember.imgUrl ? <img src={activity.byMember.imgUrl} alt=\"avatar\" /> :\r\n                                    utilService.getNameInitials(activity.byMember.fullname)\r\n                            }</div>}</Link>\r\n                        <div>\r\n                            <h2>{activity.byMember.fullname}</h2>\r\n                            <h4>{moment(activity.createdAt).from(Date.now())}</h4>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <h4 >{`${activity.byMember.fullname === user.fullname ? 'You' : activity.byMember.fullname} ${activity.txt}`}</h4>\r\n                    </div>\r\n                </div>\r\n            })}\r\n        </div>\r\n    </div>\r\n}\r\n","\r\nimport { useMemo, useState } from 'react'\r\nimport { EditableElement } from './EditableElement';\r\nimport PeopleOutlineIcon from '@material-ui/icons/PeopleOutline';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport { BoardFilter } from './BoardFilter';\r\nimport { BoardMembers } from './BoardMembers';\r\nimport { BoardActivities } from './BoardActivities';\r\nimport { boardService } from '../services/boardService';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\n\r\nexport const BoardHeader = ({ board, onAddGroup, onChangeTitle, onChangeBoardMemebrs, onSetFilter, changeBoardView, user }) => {\r\n\r\n    const [isShowBoardMember, setIsShowBoardMember] = useState(false)\r\n    const [isShowActivities, setIsShowActivities] = useState(false)\r\n    const [activityFilterText, setActivityFilterText] = useState('')\r\n\r\n    const toggleMembersModal = () => {\r\n        setIsShowBoardMember(!isShowBoardMember)\r\n    }\r\n\r\n    const showActivities = () => {\r\n        setIsShowActivities(!isShowActivities)\r\n        boardService.updateActivities(board)\r\n    }\r\n\r\n    const handleChange = (ev) => setActivityFilterText(ev.target.value)\r\n\r\n    const activitiesForDisplay = useMemo(() => {\r\n        const { activities } = board\r\n        const filterRegex = new RegExp(activityFilterText, 'i');\r\n        const filteredActivities = activities.filter(activity => {\r\n            return filterRegex.test(activity.txt) || filterRegex.test(activity.byMember.fullname)\r\n        })\r\n        return filteredActivities\r\n    },[board,activityFilterText])\r\n\r\n    const unReadActivities = useMemo(() => activitiesForDisplay.filter(activity => !activity.isRead),[activitiesForDisplay])\r\n    const activities = useMemo(() => activitiesForDisplay.filter(activity => activity.isRead),[activitiesForDisplay])\r\n    if (!board) return <h1>Loading...</h1>\r\n\r\n    return <section className=\"board-header flex column space-between\">\r\n        <div className=\"flex align-center board-header-top-section\">\r\n            <div className=\"board-name-and-owner\">\r\n                <h2><EditableElement onChangeTitle={onChangeTitle}>{board.title}</EditableElement></h2>\r\n                <h4>{''}Owner :{board.createdBy.fullname}</h4>\r\n            </div>\r\n            <div className=\"flex space-between relative\">\r\n                <span className=\"board-member-status top-section-item\" data-tip data-for=\"members\"\r\n                    onClick={toggleMembersModal}> <PeopleOutlineIcon />/{board.members.length}</span>\r\n                {isShowBoardMember && <BoardMembers board={board}\r\n                    onChangeBoardMemebrs={onChangeBoardMemebrs} onCloseModalMembers={toggleMembersModal} />}\r\n\r\n                <span\r\n                    className=\"activity-display top-section-item\"\r\n                    onClick={() => setIsShowActivities(true)}\r\n                >\r\n                    Activities\r\n                         <span style={{ color: unReadActivities.length ? '#0085ff' : '' }}>\r\n                        {unReadActivities.length}\r\n                    </span>\r\n                         /{board.activities.length}\r\n                </span>\r\n\r\n                <div className={`${isShowActivities ? 'close-Activities' : ''}`} onClick={showActivities}>\r\n                </div>\r\n                <div className={`activities ${isShowActivities ? 'open' : ''}`}>\r\n                    <ArrowBackIcon onClick={showActivities} />\r\n                    <BoardActivities activityFilterText={activityFilterText} handleChange={handleChange} activities={unReadActivities} user={user} clear={() => boardService.updateActivities(board, true)}\r\n                        title={board.title} content={`New Activities: ${unReadActivities.length}`} />\r\n                    <BoardActivities activities={activities} user={user} content={`Activities Read: ${activities.length}`} />\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n        <div className=\" flex space-between align-flex-end\">\r\n            <div className=\"switch-view\" >\r\n                <select onChange={changeBoardView} name=\"\">\r\n                    <option value=\"board\">Board</option>\r\n                    <option value=\"dashboard\">DashBoard</option>\r\n                </select>\r\n            </div>\r\n            <div className=\"board-options flex align-flex-end relative\">\r\n                <BoardFilter onSetFilter={onSetFilter} board={board} />\r\n                <button className=\"add-item\" onClick={() => onAddGroup()}>New group</button>\r\n            </div>\r\n        </div>\r\n        <ReactTooltip className=\"sunday-tooltip\" id=\"members\" place=\"bottom\" effect=\"solid\">\r\n            Who is on this board?\r\n      </ReactTooltip>\r\n    </section>\r\n}\r\n\r\n\r\n","// import { Bar, Doughnut, Line, Pie } from 'react-chartjs-2';\r\nimport React, { Component } from 'react'\r\n\r\nimport Chart from 'react-apexcharts';\r\n\r\n\r\nexport class DashBoard extends Component {\r\n    componentDidMount() {\r\n\r\n\r\n    }\r\n\r\n    cardStatusByMember = () => {\r\n        const { board } = this.props\r\n        var cardsByMembers = {}\r\n        board.groups.forEach(group => {\r\n            group.cards.forEach(card => {\r\n                card.members.forEach((member) => {\r\n                    if (!cardsByMembers[member.fullname]) {\r\n                        cardsByMembers[member.fullname] = [{ status: card.status }]\r\n\r\n                    } else {\r\n                        cardsByMembers[member.fullname].push({ status: card.status })\r\n\r\n                    }\r\n                })\r\n            })\r\n        })\r\n\r\n\r\n\r\n\r\n        var prevText = ''\r\n        var prevName = ''\r\n        // var counter = 0\r\n        var values = {};\r\n        var backgroundColor = [];\r\n        for (let key in cardsByMembers) {\r\n            cardsByMembers[key].forEach((card) => {\r\n                const idx = backgroundColor.indexOf(card.status.color)\r\n                if (idx < 0) backgroundColor.push(card.status.color)\r\n\r\n            })\r\n\r\n\r\n            cardsByMembers[key].forEach((card, idx, arr) => {\r\n                \r\n                if (values[card.status.text]) {\r\n                    if (prevName === key && prevText === card.status.text) {\r\n\r\n                        const copy = values[card.status.text].data[values[card.status.text].data.length - 1] + 1\r\n                        // values[card.status.text].data.pop()\r\n                        values[card.status.text].data.splice(values[card.status.text].data.length - 1, 1, copy)\r\n\r\n                    } else if (prevName !== key && prevText === card.status.text) {\r\n                        values[card.status.text].data.push(1)\r\n                    } else if (prevName === key && prevText !== card.status.text) {\r\n                        values[card.status.text].data.push(1)\r\n                        // values[card.status.text].data.splice(values[card.status.text].data.length - 1, 0, 1)\r\n\r\n                    }\r\n\r\n                } else {\r\n                    values[card.status.text] = { data: [1], name: card.status.text }\r\n                }\r\n                prevName = key\r\n                prevText = card.status.text\r\n            })\r\n\r\n\r\n        }\r\n        const options = {\r\n\r\n            colors: backgroundColor,\r\n\r\n            // colors: backgroundColor,\r\n            chart: {\r\n                type: 'bar',\r\n                height: '100%',\r\n                width: '100%',\r\n                stacked: true,\r\n                toolbar: {\r\n                    show: true\r\n                },\r\n                zoom: {\r\n                    enabled: true\r\n                }\r\n            },\r\n            responsive: [],\r\n            plotOptions: {\r\n                bar: {\r\n                    horizontal: false,\r\n                },\r\n            },\r\n            xaxis: {\r\n                categories: Object.keys(cardsByMembers),\r\n\r\n            },\r\n            yaxis: {\r\n                lines: {\r\n                    show: true,\r\n                }\r\n            },\r\n            legend: {\r\n                position: 'right',\r\n                offsetY: 0\r\n            },\r\n            fill: {\r\n                opacity: 1\r\n            }\r\n        };\r\n        const series = Object.values(values)\r\n\r\n        return { options, series }\r\n\r\n    }\r\n\r\n    render() {\r\n        const value = this.cardStatusByMember()\r\n        // const { board } = this.props\r\n        // const hi = this.cardStatusByMember()\r\n\r\n        return (\r\n            <div>\r\n                <Chart options={value.options} series={value.series} type=\"bar\" width={'70%'} height={'300%'} />\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { GroupPreview } from './GroupPreview';\r\nimport { BoardHeader } from './BoardHeader';\r\nimport {\r\n    loadBoards, addCard, addGroup, changeBoardTitle, onChangeGroupTitle, changeBoardMemebrs,\r\n    changeGroupColor, removeGroup, changeGroupIdx, changeCardIdx, getKeyById, onDragStart, onDragEnd\r\n} from '../store/actions/boardAction.js'\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\nimport { DashBoard } from './DashBoard';\r\nimport { boardService } from '../services/boardService'\r\nimport { setMsg } from '../store/actions/userAction.js';\r\nexport class _BoardPreview extends Component {\r\n    state = {\r\n        view: 'board',\r\n        filterBy: null,\r\n        onDrag: true,\r\n        isDelete: false,\r\n        board: this.props.board\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.board !== this.props.board) this.setState({ board: this.props.board })\r\n        if (!prevProps.onDrag && this.props.onDrag) {\r\n            if (this.state.filterBy) {\r\n                const copyFilter = { ...this.state.filterBy }\r\n                copyFilter.sortBy = '';\r\n                this.setState({ filterBy: copyFilter, onDrag: true })\r\n            }\r\n        }\r\n    }\r\n    onAddCard = async (cardTitle, groupId) => {\r\n        this.props.setMsg('Card Successfully Added')\r\n        const { board, addCard, loggedInUser } = this.props\r\n        await addCard({ cardTitle, groupId, board, user: loggedInUser })\r\n    }\r\n    onAddGroup = async () => {\r\n        const { board, loggedInUser, addGroup } = this.props;\r\n        await addGroup(board, loggedInUser);\r\n    }\r\n    //Board Title\r\n    onChangeTitle = async (boardTitle) => {\r\n        const { board, loggedInUser } = this.props\r\n        await this.props.changeBoardTitle(boardTitle, board, loggedInUser)\r\n    }\r\n    //Group Title\r\n    onChangeGroupTitle = async (groupTitle, groupId) => {\r\n        const { board, onChangeGroupTitle, loggedInUser } = this.props\r\n        await onChangeGroupTitle({ board: { ...board }, groupId, groupTitle, user: loggedInUser })\r\n    }\r\n    onChangeBoardMemebrs = async (memberData, type) => {\r\n        const { changeBoardMemebrs, loggedInUser, board } = this.props;\r\n        await changeBoardMemebrs(memberData, board, type, loggedInUser);\r\n    }\r\n    onChangeGroupColor = async (color, groupId) => {\r\n        this.props.setMsg('Group color Successfully Change')\r\n        const { changeGroupColor, board } = this.props;\r\n        await changeGroupColor(color, board, groupId)\r\n    }\r\n    onRemoveGroup = async (group) => {\r\n        const { removeGroup, board, loggedInUser } = this.props;\r\n        await removeGroup(board, group, loggedInUser)\r\n        this.props.setMsg('Group Successfully Removed')\r\n    }\r\n    onDragStart = () => {\r\n        this.props.onDragStart()\r\n    }\r\n    onDragEnd = async (result) => {\r\n        this.props.onDragEnd()\r\n        const { destination, source, draggableId } = result\r\n        if (!destination) return\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index || !destination.droppableId || !source.droppableId) return\r\n        const { changeGroupIdx, changeCardIdx, board } = this.props\r\n        if (result.type === 'group') {\r\n            const boardToUpdate = await changeGroupIdx(board, result)\r\n            this.setState({ board: boardToUpdate })\r\n        }\r\n        else {\r\n            const boardToUpdate = JSON.parse(JSON.stringify(board))\r\n            const sourceGroup = boardService.getKeyById(boardToUpdate, source.droppableId)\r\n            var cardToAdd = boardService.getKeyById(sourceGroup, draggableId)\r\n            const groups = boardToUpdate.groups.map(group => {\r\n                if (group.id === source.droppableId && group.id !== destination.droppableId) {\r\n                    group.cards.splice(source.index, 1)\r\n                    return group\r\n                } else if (group.id !== source.droppableId && group.id === destination.droppableId) {\r\n                    if (!cardToAdd) {\r\n                        cardToAdd = boardService.getKeyById(group, draggableId)\r\n                    }\r\n                    group.cards.splice(destination.index, 0, cardToAdd)\r\n                    return group\r\n                } else if (group.id === source.droppableId && group.id === destination.droppableId) {\r\n                    group.cards = group.cards.map((card, idx, cards) => {\r\n                        if (idx === source.index) return cards[destination.index]\r\n                        if (idx === destination.index) return cards[source.index]\r\n                        else return card\r\n                    })\r\n                    return group\r\n                } else return group\r\n            })\r\n            boardToUpdate.groups = groups\r\n            this.setState({ board: boardToUpdate })\r\n            await changeCardIdx(boardToUpdate, result)\r\n        }\r\n    }\r\n    changeBoardView = (ev) => {\r\n        const { value } = ev.target\r\n        if (value === 'dashboard') this.setState({ isShowDashboard: true })\r\n        else this.setState({ isShowDashboard: false })\r\n    }\r\n    onSetFilter = (filterBy) => {\r\n        this.setState({ filterBy })\r\n    }\r\n    getBoardForDisplay = () => {\r\n        const { filterBy, board } = this.state\r\n        var copyBoard = JSON.parse(JSON.stringify(board))\r\n        if (filterBy) {\r\n            if (filterBy.status.length) {\r\n                copyBoard.groups = copyBoard.groups.filter(group => {\r\n                    const filteredCards = group.cards.filter(card => {\r\n                        const status = filterBy.status.find(label => {\r\n                            return card.status.text === label\r\n                        });\r\n                        if (!status) return false\r\n                        return true\r\n                    })\r\n                    if (filteredCards.length) {\r\n                        group.cards = filteredCards\r\n                        return true\r\n                    }\r\n                    return false\r\n                })\r\n            }\r\n            if (filterBy.priority.length) {\r\n                copyBoard.groups = copyBoard.groups.filter(group => {\r\n                    const filteredCards = group.cards.filter(card => {\r\n                        const priority = filterBy.priority.find(label => {\r\n                            return card.priority.text === label\r\n                        });\r\n                        if (!priority) return false\r\n                        return true\r\n                    })\r\n                    if (filteredCards.length) {\r\n                        group.cards = filteredCards\r\n                        return true\r\n                    }\r\n                    return false\r\n                })\r\n            }\r\n            if (filterBy.membersId.length) {\r\n                copyBoard.groups = copyBoard.groups.filter(group => {\r\n                    const filteredCards = group.cards.filter(card => {\r\n                        const member = card.members.find(member => {\r\n                            return (filterBy.membersId.includes(member._id))\r\n                        })\r\n                        if (!member) return false\r\n                        return true\r\n                    })\r\n                    if (filteredCards.length) {\r\n                        group.cards = filteredCards\r\n                        return true\r\n                    }\r\n                    return false\r\n                })\r\n            }\r\n            if (filterBy.sortBy && !this.props.onDrag) {\r\n                if (filterBy.sortBy === 'name') copyBoard.groups = boardService.sortByTitle(copyBoard.groups)\r\n                else copyBoard.groups = boardService.sortByDate(copyBoard.groups)\r\n            }\r\n            const filterRegex = new RegExp(filterBy.txt, 'i');\r\n            copyBoard.groups = copyBoard.groups.filter(group => {\r\n                const filteredCards = group.cards.filter(card => filterRegex.test(card.title))\r\n                if (filteredCards.length) {\r\n                    group.cards = filteredCards\r\n                    return true\r\n                } else return false\r\n                    || filterRegex.test(group.title)\r\n            })\r\n        }\r\n        return copyBoard\r\n    }\r\n    render() {\r\n        const { loggedInUser, onDrag, board } = this.props\r\n        const { isShowDashboard } = this.state\r\n        const filteredBoard = this.getBoardForDisplay()\r\n        return (\r\n            <>\r\n                <BoardHeader user={loggedInUser} board={board} onAddGroup={this.onAddGroup} changeBoardView={this.changeBoardView} onChangeTitle={this.onChangeTitle}\r\n                    onChangeBoardMemebrs={this.onChangeBoardMemebrs} onSetFilter={this.onSetFilter} />\r\n                {isShowDashboard && <DashBoard board={board} />}\r\n                {!isShowDashboard && <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart}>\r\n                    <Droppable droppableId={board._id} isCombineEnabled type='group'>\r\n                        {(provided) => (\r\n                            <div className=\"main-groups-container\" ref={provided.innerRef}\r\n                                {...provided.droppableProps}>\r\n                                {provided.placeholder}\r\n                                <div className=\"groups-container flex column\">\r\n                                    {filteredBoard.groups.map((group, idx) => <GroupPreview\r\n                                        key={group.id} group={group}\r\n                                        onDrag={onDrag}\r\n                                        onAddCard={this.onAddCard} board={board} onRemoveGroup={this.onRemoveGroup}\r\n                                        onChangeGroupTitle={this.onChangeGroupTitle} onChangeGroupColor={this.onChangeGroupColor}\r\n                                        idx={idx} />)}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>}\r\n            </>\r\n        )\r\n    }\r\n}\r\nconst mapGlobalStateToProps = (state) => {\r\n    return {\r\n        loggedInUser: state.userReducer.loggedInUser,\r\n        onDrag: state.boardReducer.onDrag,\r\n        board: state.boardReducer.board\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    loadBoards,\r\n    addCard,\r\n    addGroup,\r\n    changeBoardTitle,\r\n    onChangeGroupTitle,\r\n    changeBoardMemebrs,\r\n    changeGroupColor,\r\n    removeGroup,\r\n    changeGroupIdx,\r\n    changeCardIdx,\r\n    getKeyById,\r\n    setMsg,\r\n    onDragStart,\r\n    onDragEnd\r\n}\r\nexport const BoardPreview = connect(mapGlobalStateToProps, mapDispatchToProps)(_BoardPreview)","import axios from 'axios';\r\n\r\n\r\n\r\nexport const cloudinaryService = {\r\n    uploadImg\r\n}\r\n\r\n\r\nasync function uploadImg(url) {\r\n    const CLOUD_NAME = \"dptiv4ajc\"\r\n    const UPLOAD_PRESET = \"rolpcssu\"\r\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', url)\r\n    formData.append('upload_preset', UPLOAD_PRESET);\r\n    try {\r\n        const res = await axios.post(`${UPLOAD_URL}`, formData)\r\n        return res.data.url\r\n\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n","import { Link } from 'react-router-dom'\r\nimport React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getKeyById } from '../store/actions/boardAction.js'\r\nimport SunEditor /*{ buttonList }*/ from \"suneditor-react\";\r\nimport 'suneditor/dist/css/suneditor.min.css';\r\nimport { cloudinaryService } from '../services/cloudinary-service.js';\r\nimport { addCardUpdate } from '../store/actions/boardAction.js'\r\nimport { utilService } from '../services/utilService.js';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport moment from 'moment';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\n\r\nclass _CardUpdates extends Component {\r\n    state = {\r\n        card: null,\r\n        cardUpdate: {\r\n            byMember: null,\r\n            type: 'txt',\r\n            value: '',\r\n            title: ''\r\n        },\r\n        isLoading: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { cardId } = this.props.match.params\r\n        if (cardId) {\r\n            this.getCard(cardId)\r\n            this.setState({ isOpen: true })\r\n        }\r\n        // else <Redirect to=\"/bo/>\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.match.params !== this.props.match.params) {\r\n            const { cardId } = this.props.match.params\r\n            this.getCard(cardId)\r\n        }\r\n    }\r\n\r\n    getCard = async (cardId) => {\r\n        const { boards, getKeyById } = this.props\r\n        const card = await getKeyById(boards, cardId)\r\n        this.setState({ card })\r\n    }\r\n\r\n\r\n    handleChange = (content) => {\r\n        const copyUpdate = { ...this.state.cardUpdate }\r\n        const regex = /(<([^>]+)>)/ig\r\n        if (!content.replace(regex, '').length) {\r\n            copyUpdate.value = ''\r\n            this.setState({ cardUpdate: copyUpdate })\r\n            return\r\n        }\r\n        copyUpdate.value = content\r\n        this.setState({ cardUpdate: copyUpdate })\r\n    }\r\n\r\n    uploadImg = async (ev) => {\r\n        const copyUpdate = { ...this.state.cardUpdate }\r\n        if (!ev.target.files[0]) return\r\n        copyUpdate.value = '<h1>Loading...</h1>'\r\n        this.setState({ isLoading: true, cardUpdate: copyUpdate })\r\n        const imgUrl = await cloudinaryService.uploadImg(ev.target.files[0]);\r\n        copyUpdate.value = imgUrl\r\n        copyUpdate.type = 'img'\r\n        this.setState({ cardUpdate: copyUpdate, isLoading: false })\r\n    }\r\n\r\n\r\n    onImageUploadBefore = () => {\r\n        const copyUpdate = { ...this.state.cardUpdate }\r\n        copyUpdate.type = 'img'\r\n        this.setState({ cardUpdate: copyUpdate })\r\n        return true\r\n    }\r\n\r\n    onAddUpdate = (ev) => {\r\n        ev.preventDefault()\r\n        const regex = /(<([^>]+)>)/ig\r\n        const copyUpdate = { ...this.state.cardUpdate }\r\n        if (!copyUpdate.value.replace(regex, '').length) {\r\n            copyUpdate.value = ''\r\n            this.setState({ cardUpdate: copyUpdate })\r\n            return\r\n        }\r\n        if (copyUpdate.type === 'img') {\r\n            copyUpdate.value = copyUpdate.value.replace(regex, '')\r\n        }\r\n\r\n        copyUpdate.byMember = this.props.loggedInUser\r\n        this.props.addCardUpdate(copyUpdate, this.props.board, this.state.card)\r\n        this.setState({\r\n            cardUpdate: {\r\n                byMember: null,\r\n                value: '',\r\n                title: '',\r\n                type: 'txt'\r\n\r\n            },\r\n            isOpen: false\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { board } = this.props\r\n        const { card, cardUpdate } = this.state\r\n        if (!card || !board) return null\r\n        const htmlUpdates = card.updates.reduce((acc, update) => {\r\n            if (update.type === 'txt') acc += `<div class=\"update txt-update\">\r\n                                                <div class=\"update-header flex space-between align-center\">\r\n                                                    <div class=\"update-writer flex align-center\">\r\n                                                        <span class=\"user-thumbnail\">${utilService.getNameInitials(update.byMember.fullname)}</span>\r\n                                                        <h5>${update.byMember.fullname}</h5>\r\n                                                    </div>\r\n                                                    <span class=\"created-at\">${moment(update.createdAt).from(Date.now())}</span>\r\n                                                </div>\r\n                                                <div class=\"update-body\">${update.value}</div>\r\n                                               </div>`\r\n            else if (update.type === 'img') acc += `<div class=\"update txt-update\">\r\n                                                <div class=\"update-header flex space-between align-center\">\r\n                                                 <div class=\"update-writer flex align-center\">\r\n                                                        <span class=\"user-thumbnail\">${utilService.getNameInitials(update.byMember.fullname)}</span>\r\n                                                        <h5>${update.byMember.fullname}</h5>\r\n                                                    </div>\r\n                                                    <span class=\"created-at\">${moment(update.createdAt).from(Date.now())}</span>\r\n                                                </div>\r\n                                                <div class=\"update-body\"><img class=\"img-update\" src=\"${update.value}\"/>\r\n                                                </div></div>\r\n                                            </div>`\r\n\r\n            return acc\r\n\r\n        }, '')\r\n        return (\r\n            <>\r\n                <section className={`card-updates open   `}>\r\n                    <Link className=\"back-arrow\" to={`/board/${board._id}`} onClick={() => this.setState({ isOpen: false })}><ArrowBackIcon /></Link>\r\n                    <div className=\"updates-card-header flex align-center space-between\">\r\n                        <h2 className=\"card-update-title\">{this.state.card.title}</h2>\r\n                        <span className=\"card-status\" style={{ backgroundColor: card.status.color }}>{card.status.text}</span>\r\n                    </div>\r\n                    <div className=\"text-editor-wrapper\">\r\n                        <form onSubmit={this.onAddUpdate}>\r\n                            <SunEditor placeholder=\"Write an update...\"\r\n                                onChange={this.handleChange}\r\n                                onDrop={this.handleDrop}\r\n                                setDefaultStyle=\"\"\r\n                                setOptions={{\r\n                                    buttonList: [\r\n                                        ['bold', 'underline', 'italic', 'strike', 'fontColor', 'fontSize', 'align', 'link', 'image'],],\r\n                                    // ['formatBlock', 'font', 'fontSize',],\r\n                                    // ['fontColor', 'hiliteColor', 'align',],\r\n                                    // ['removeFormat'], ['table', 'link', 'image', 'video'], ['codeView', 'fullScreen'], ['print']],\r\n                                    imageResizing: false\r\n\r\n                                }}\r\n                                // onImageUpload={this.uploadImg}\r\n                                // onImageUploadBefore={this.onImageUploadBefore}\r\n                                setContents={cardUpdate.value}\r\n\r\n                            />\r\n                            <div className=\"updates-bottom-btns flex space-between align-center\">\r\n                                <label className=\"upload-file-label\"><CloudUploadIcon /> Upload image\r\n                                    <input type=\"file\" onChange={this.uploadImg} /></label>\r\n                                <button className=\"card-update-btn add-item\">Update</button>\r\n                            </div>\r\n\r\n                        </form>\r\n\r\n                    </div>\r\n                    <div className=\"updates-container\">\r\n                        <div dangerouslySetInnerHTML={{ __html: htmlUpdates }} />\r\n                    </div>\r\n                </section>\r\n            </>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapGlobalStateToProps = (state) => {\r\n    return {\r\n        loggedInUser: state.userReducer.loggedInUser,\r\n        boards: state.boardReducer.boards,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    getKeyById,\r\n    addCardUpdate\r\n}\r\n\r\n\r\nexport const CardUpdates = connect(mapGlobalStateToProps, mapDispatchToProps)(_CardUpdates);\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { MainSideBar } from '../cmps/MainSideBar'\r\nimport { BoardSideBar } from '../cmps/BoardSideBar'\r\nimport { BoardPreview } from '../cmps/BoardPreview'\r\nimport { loadBoards, removeBoard, getBoardById, addBoard, updateBoards } from '../store/actions/boardAction.js'\r\nimport { logOut, setMsg, updateReadNotifications, cleanNotifications, updateUserNotifications } from '../store/actions/userAction.js'\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport { boardService } from '../services/boardService'\r\nimport { socketService } from '../services/socketService'\r\nimport { Route } from 'react-router-dom';\r\nimport { Redirect } from 'react-router-dom'\r\nimport { CardUpdates } from '../cmps/CardUpdates'\r\nclass _BoardApp extends Component {\r\n    state = {\r\n        isBoardSideBarOpen: window.innerWidth >= 800,\r\n        boardTitle: '',\r\n    }\r\n    async componentDidMount() {\r\n        const { loggedInUser, boards } = this.props\r\n        if (!loggedInUser) {\r\n            this.props.history.push('/')\r\n            return\r\n        }\r\n        socketService.setup()\r\n        socketService.emit('userSocket', loggedInUser)\r\n        socketService.on('boardUpdate', this.props.updateBoards)\r\n        socketService.on('updateUser', this.props.updateUserNotifications)\r\n        const { boardId } = this.props.match.params;\r\n        if (!boardId) {\r\n            const userBoards = await this.props.loadBoards(loggedInUser._id)\r\n            if (userBoards.length) this.props.history.push(`/board/${userBoards[0]._id}`)\r\n        }\r\n        else if (!boards.length && boardId) await this.props.loadBoards(loggedInUser._id)\r\n        if (boardId) {\r\n            this.loadBoardById(boardId)\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        socketService.off('boardUpdate', this.props.updateBoards)\r\n        socketService.off('updateUser', this.props.updateUserNotifications)\r\n        socketService.terminate()\r\n    }\r\n    async componentDidUpdate(prevProps) {\r\n        if (prevProps.match.params.boardId !== this.props.match.params.boardId || prevProps.boards !== this.props.boards) {\r\n            const { boardId } = this.props.match.params\r\n            if (!boardId) return\r\n            else {\r\n                this.loadBoardById(boardId)\r\n            }\r\n        }\r\n    }\r\n    loadBoards = () => {\r\n        const { loadBoards, loggedInUser } = this.props\r\n        loadBoards(loggedInUser._id)\r\n    }\r\n    loadBoardById = async (boardId) => {\r\n        await this.props.getBoardById(boardId)\r\n    }\r\n    toggleBoardSideBar = () => {\r\n        this.setState({ isBoardSideBarOpen: !this.state.isBoardSideBarOpen })\r\n    }\r\n    onDeleteBoard = async (boardId, boardIdx) => {\r\n        await this.props.removeBoard(boardId)\r\n        const { boards } = this.props\r\n        const currBoardId = boardService.getBoardIdByIdx(boardIdx, boards)\r\n        if (currBoardId) this.props.history.push(`/board/${currBoardId}`)\r\n        else this.props.history.push('/board')\r\n        this.props.setMsg('Board Successfully Deleted')\r\n    }\r\n    onAddBoard = (boardTitle) => {\r\n        this.props.addBoard(boardTitle, this.props.loggedInUser)\r\n        this.props.setMsg('Board Successfully Added')\r\n    }\r\n    onLogOut = async () => {\r\n        await this.props.logOut()\r\n    }\r\n    onSetFilter = (boardTitle) => {\r\n        this.setState({ boardTitle })\r\n    }\r\n    getBoardsForDisplay = () => {\r\n        const { boardTitle } = this.state\r\n        const { boards } = this.props\r\n        const filterRegex = new RegExp(boardTitle, 'i');\r\n        const copyBoards = boards.filter(board => filterRegex.test(board.title));\r\n        return copyBoards\r\n    }\r\n    onCleanNotifications = () => {\r\n        this.props.cleanNotifications(this.props.loggedInUser)\r\n    }\r\n    onUpdateNotifications = () => {\r\n        this.props.updateReadNotifications(this.props.loggedInUser)\r\n    }\r\n    render() {\r\n        const { match, loggedInUser, msg, board } = this.props\r\n        const { isBoardSideBarOpen } = this.state\r\n        if (!this.props.loggedInUser) return <Redirect exact to=\"/\" />\r\n        return <div>\r\n            <div className=\"main-sidebar-container mobile\">\r\n                <MainSideBar\r\n                    onLogOut={this.onLogOut}\r\n                    user={loggedInUser}\r\n                    onCleanNotifications={this.onCleanNotifications}\r\n                    onUpdateNotifications={this.onUpdateNotifications} />\r\n            </div>\r\n            <div className=\"board-app-container flex\">\r\n                <div className=\"main-sidebar-container desktop\">\r\n                    <MainSideBar\r\n                        onLogOut={this.onLogOut}\r\n                        user={loggedInUser}\r\n                        onCleanNotifications={this.onCleanNotifications}\r\n                        onUpdateNotifications={this.onUpdateNotifications} />\r\n                </div>\r\n                <div className={`board-sidebar-container ${!isBoardSideBarOpen ? 'closed' : ''}`}>\r\n                    <button className=\"toggle-board-sidebar\" onClick={this.toggleBoardSideBar}>\r\n                        {isBoardSideBarOpen ? <ArrowBackIcon /> : <ArrowForwardIcon />}\r\n                    </button>\r\n                    <BoardSideBar boards={this.getBoardsForDisplay()} onDeleteBoard={this.onDeleteBoard} onAddBoard={this.onAddBoard} user={loggedInUser} onSetFilter={this.onSetFilter} />\r\n                </div>\r\n                <div className=\"board-preview-container\">\r\n                    {board && <BoardPreview />}\r\n                </div>\r\n                <div>\r\n                    <Route path={`${match.path}/card/:cardId`} render={(props) => {\r\n                        return <CardUpdates board={board} {...props} />\r\n                    }} />\r\n                </div>\r\n                {msg && <div className=\"snackbar slide-top\">{msg}</div>}\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\nconst mapGlobalStateToProps = (state) => {\r\n    return {\r\n        loggedInUser: state.userReducer.loggedInUser,\r\n        boards: state.boardReducer.boards,\r\n        msg: state.userReducer.msg,\r\n        board: state.boardReducer.board\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    removeBoard,\r\n    loadBoards,\r\n    getBoardById,\r\n    logOut,\r\n    addBoard,\r\n    updateBoards,\r\n    setMsg,\r\n    updateReadNotifications,\r\n    updateUserNotifications,\r\n    cleanNotifications\r\n}\r\nexport const BoardApp = connect(mapGlobalStateToProps, mapDispatchToProps)(_BoardApp);\r\n","export default __webpack_public_path__ + \"static/media/undrawtask.3bbcbb76.svg\";","import React from 'react'\r\nimport undrawtask from '../assets/img/undrawtask.svg';\r\nimport { HomeHeader } from '../cmps/HomeHeader';\r\nimport { connect } from 'react-redux';\r\nimport { checkLogin, updateUserNotifications } from '../store/actions/userAction.js'\r\nimport { loadBoards } from '../store/actions/boardAction.js'\r\n\r\nexport function _Home(props) {\r\n\r\n\r\n    return <div className=\"home-main-container\">\r\n        <HomeHeader />\r\n        <div className=\"home-hero\">\r\n            <div className=\"home-hero-inner\" >\r\n                <div className=\"home-hero-titles flex\">\r\n                    <h2>Join the <span>Sunday</span> revolution</h2>\r\n                    <h3>Manage your project with the team, all in one workspace</h3>\r\n                    <button onClick={async () => {\r\n                        try {\r\n                            const user = await props.checkLogin({\r\n                                username: \"guest\",\r\n                                password: \"12345678\"\r\n                            })\r\n                            if (user) {\r\n                                const boards = await props.loadBoards(user._id)\r\n                                const path = (boards.length) ? `/board/${boards[0]._id}` : '/board'\r\n                                props.history.push(path)\r\n                            }\r\n                        } catch (err) {\r\n                            console.log(err);\r\n                        }\r\n                    }}>Get started!</button>\r\n                </div>\r\n                <img src={undrawtask} alt=\"undraw task img\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nconst mapGlobalStateToProps = (state) => {\r\n    return {}\r\n}\r\nconst mapDispatchToProps = {\r\n    checkLogin,\r\n    loadBoards,\r\n    updateUserNotifications\r\n}\r\nexport const Home = connect(mapGlobalStateToProps, mapDispatchToProps)(_Home)\r\n\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getBoardsByUserId } from '../../store/actions/boardAction'\r\nimport ArrowForwardOutlinedIcon from '@material-ui/icons/ArrowForwardOutlined';\r\nimport DashboardOutlinedIcon from '@material-ui/icons/DashboardOutlined';\r\nimport AssignmentOutlinedIcon from '@material-ui/icons/AssignmentOutlined';\r\nimport AlternateEmailIcon from '@material-ui/icons/AlternateEmail';\r\n\r\n\r\nexport class _GeneralUserInfo extends Component {\r\n    state = {\r\n        boards: null\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const { user } = this.props;\r\n        const boards = await this.props.getBoardsByUserId(user._id);\r\n        this.setState({ boards });\r\n    }\r\n\r\n\r\n    getActiveCards = () => {\r\n        const { boards } = this.state;\r\n        const { user } = this.props;\r\n        // const count = boardService.deepSearchByKey(boards, user._id)\r\n        const count = boards.reduce((acc, board) => {\r\n            board.groups.forEach(group => {\r\n                group.cards.forEach(card => {\r\n                    card.members.forEach(member => {\r\n                        if (member._id === user._id && card.status.text !== 'Done') {\r\n                            const activeCard = {\r\n                                id: card.id,\r\n                                title: card.title,\r\n                                status: card.status,\r\n                                boardId: board._id\r\n                            }\r\n                            acc.push(activeCard);\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n            return acc;\r\n        }, [])\r\n        return count;\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { user } = this.props;\r\n        const { boards } = this.state;\r\n        if (!boards) return null;\r\n        const activeCards = this.getActiveCards();\r\n        return <div className=\"general-container\">\r\n            <div className=\"general-inner-container\">\r\n                <div className=\"users-boards-list\">\r\n                    <div>\r\n                        <h2>Boards</h2>\r\n                        <DashboardOutlinedIcon />\r\n                    </div>\r\n                    <div>\r\n                        {!boards.length ? <h3>No boards to show</h3> :\r\n                            boards.map(board => {\r\n                                return <div key={board._id} className=\"users-boards-list-row\">\r\n                                    <Link to={`/board/${board._id}`}><span>{board.title}</span> <ArrowForwardOutlinedIcon /> </Link>\r\n                                </div>\r\n                            })}\r\n                    </div>\r\n                </div>\r\n                <div className=\"active-items-container\">\r\n                    <div>\r\n                        <h2>Active cards</h2>\r\n                        <AssignmentOutlinedIcon />\r\n                    </div>\r\n                    <div>\r\n                        {!activeCards ? <h3>No active cards to show</h3> :\r\n                            activeCards.map(card => {\r\n                                return <Link key={card.id} to={`/board/${card.boardId}/card/${card.id}`}> <div style={{ borderLeft: `7px solid ${card.status.color}` }}\r\n                                    className=\"active-items-list-row\">\r\n                                    <h3>{card.title}</h3>\r\n                                </div></Link>\r\n                            })}\r\n                    </div>\r\n                </div>\r\n                <div className=\"personal-info-container\">\r\n                    <div>\r\n                        <h2>Contact information</h2>\r\n                        <AssignmentOutlinedIcon />\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"personal-info-icon-row\">\r\n                            <a href=\"mailto:email@example.com\">\r\n                                <AlternateEmailIcon />\r\n                                <h3>{user.email}</h3>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nconst mapGlobalStateToProps = (state) => {\r\n    return {\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    getBoardsByUserId\r\n}\r\n\r\n\r\nexport const GeneralUserInfo = connect(mapGlobalStateToProps, mapDispatchToProps)(_GeneralUserInfo);\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport { cloudinaryService } from '../../services/cloudinary-service';\r\nimport { utilService } from '../../services/utilService';\r\nimport { updateUser } from '../../store/actions/userAction';\r\nimport { connect } from 'react-redux'\r\n\r\nexport class _UpdateProfile extends Component {\r\n\r\n    state = {\r\n        user: {\r\n            _id: '',\r\n            fullname: '',\r\n            dateofbirth: '',\r\n            imgUrl: '',\r\n            tel: ''\r\n        },\r\n        triggerMsg: false\r\n    }\r\n\r\n    validatePhoneNumber = (tel) => {\r\n        const isValid = /^(?:(?:(\\+?972|\\(\\+?972\\)|\\+?\\(972\\))(?:\\s|\\.|-)?([1-9]\\d?))|(0[23489]{1})|(0[57]{1}[0-9]))(?:\\s|\\.|-)?([^0\\D]{1}\\d{2}(?:\\s|\\.|-)?\\d{4})$/gm.test(tel);\r\n        return isValid;\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { user } = this.props;\r\n        this.setState({ user });\r\n    }\r\n\r\n    handleChange = (ev) => {\r\n        const { name, value } = ev.target\r\n        const { user } = this.state;\r\n        const userCopy = { ...user };\r\n        userCopy[name] = value;\r\n        this.setState({ user: userCopy })\r\n    }\r\n\r\n    onTriggerMsg = (txt) => {\r\n        this.setState({ triggerMsg: txt }, () => {\r\n            setTimeout(() => {\r\n                this.setState({ triggerMsg: '' });\r\n            }, 1500);\r\n        });\r\n    }\r\n\r\n    uploadImg = async (ev) => {\r\n        if (!ev.target.files[0]) return\r\n        const imgUrl = await cloudinaryService.uploadImg(ev.target.files[0]);\r\n        const { user } = this.state;\r\n        const userCopy = { ...user };\r\n        userCopy[\"imgUrl\"] = imgUrl;\r\n        this.setState({ user: userCopy });\r\n    }\r\n\r\n    onUpdateProfile = async (ev) => {\r\n        ev.preventDefault();\r\n        const { user } = this.state;\r\n        if (!user.fullname || !user.email) {\r\n            this.onTriggerMsg('Please fill required fields');\r\n            return;\r\n        }\r\n        if (user.tel) {\r\n            const isTelValid = this.validatePhoneNumber(user.tel)\r\n            if (!isTelValid) {\r\n                this.onTriggerMsg('Enter valid phone number');\r\n                return;\r\n            }\r\n        }\r\n        await this.props.updateUser(user);\r\n        this.onTriggerMsg('Profile updated successfully!');\r\n    }\r\n\r\n    render() {\r\n        const { user, triggerMsg } = this.state;\r\n        return <div className=\"update-profile-container\">\r\n            <div className=\"update-profile-inner-container\">\r\n                <form onSubmit={this.onUpdateProfile}>\r\n                    <div>\r\n                        <label>{user.imgUrl ? <div className=\"user-hover relative\">\r\n                            <img className=\"user-thumbnail\" src={user.imgUrl} alt=\"profile\" />\r\n                            <h3>{user.imgUrl ? 'Change' : 'Upload'}</h3>\r\n                        </div> :\r\n                            <span className=\"user-thumbnail\">{utilService.getNameInitials(user.fullname)}</span>}\r\n                            <input onChange={this.uploadImg} type=\"file\" />\r\n                        </label>\r\n                        <h3>{user.imgUrl ? 'Change' : 'Upload'}</h3>\r\n                    </div>\r\n                    <div>\r\n                        <label aria-required htmlFor=\"full-name\">Full name</label>\r\n                        <input value={user.fullname || ''} onChange={this.handleChange} type=\"text\" placeholder=\"Full name\" name=\"fullname\" id=\"full-name\" />\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"date-of-birth\">Date of birth</label>\r\n                        <input value={user.dateofbirth || ''} onChange={this.handleChange} type=\"date\" name=\"dateOfBirth\" id=\"date-of-birth\" />\r\n                    </div>\r\n                    <div>\r\n                        <label aria-required htmlFor=\"email\">email</label>\r\n                        <input value={user.email || ''} onChange={this.handleChange} type=\"email\" placeholder=\"Email\" name=\"email\" id=\"email\" />\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"tel\">Phone number</label>\r\n                        <input value={user.tel || ''} onChange={this.handleChange} type=\"tel\" placeholder=\"Phone number\" name=\"tel\" id=\"tel\" />\r\n                    </div>\r\n                    {triggerMsg && <h4>{triggerMsg}</h4>}\r\n                    <button type=\"submit\">Update profile</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapGlobalStateToProps = (state) => {\r\n    return {\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    updateUser\r\n}\r\n\r\n\r\nexport const UpdateProfile = connect(mapGlobalStateToProps, mapDispatchToProps)(_UpdateProfile);\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Link, Redirect, Route } from 'react-router-dom'\r\nimport { MainSideBar } from '../../cmps/MainSideBar'\r\nimport { GeneralUserInfo } from '../../cmps/user/GeneralUserInfo'\r\nimport { UpdateProfile } from '../../cmps/user/UpdateProfile'\r\nimport { utilService } from '../../services/utilService'\r\nimport { logOut, getUserById } from '../../store/actions/userAction'\r\nimport { getBoardsByUserId } from '../../store/actions/boardAction'\r\nimport ArrowBackOutlinedIcon from '@material-ui/icons/ArrowBackOutlined';\r\n\r\nexport class _UserProfile extends Component {\r\n\r\n    state = {\r\n        user: null,\r\n        boards: null,\r\n        isMyProfile: false\r\n    }\r\n\r\n    onLogOut = async () => {\r\n        await this.props.logOut()\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const { loggedInUser, getBoardsByUserId, getUserById } = this.props\r\n        if (!loggedInUser) {\r\n            this.props.history.push('/')\r\n            return\r\n        }\r\n        const { userId } = this.props.match.params\r\n        const user = await getUserById(userId);\r\n        const boards = await getBoardsByUserId(userId);\r\n        this.setState({ user, boards }, () => {\r\n            if (loggedInUser._id === this.state.user._id) {\r\n                this.setState({ isMyProfile: true });\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { user, isMyProfile, boards } = this.state\r\n        const { match, loggedInUser } = this.props\r\n        if (!loggedInUser) return <Redirect exact to=\"/\" />\r\n        if (!user || !boards) return null\r\n\r\n        return <div>\r\n            <div className=\"main-sidebar-container mobile\">\r\n                <MainSideBar onLogOut={this.onLogOut} user={loggedInUser} />\r\n            </div>\r\n            <div className=\"user-profile-main-container\">\r\n                <div className=\"main-sidebar-container desktop\">\r\n                    <MainSideBar onLogOut={this.onLogOut} user={loggedInUser} />\r\n                </div>\r\n                <div className=\"user-profile-panel\">\r\n                    <div className=\"user-profile-header\">\r\n                        <Link to={'/board'} className=\"link\"><ArrowBackOutlinedIcon /></Link>\r\n                        <span className=\"user-profile-initials\">\r\n                            {\r\n                                user.imgUrl ? <img src={user.imgUrl} alt=\"profile\" /> :\r\n                                    utilService.getNameInitials(user.fullname)\r\n                            }\r\n                        </span>\r\n                        <h3>{`${isMyProfile ? 'Hello,' : ''}`} <b>{user.fullname}</b></h3>\r\n                        {isMyProfile && <div className=\"user-profile-tabs\">\r\n                            <Link to={`${match.url}/general`} className=\"link\">General</Link>\r\n                            <Link to={`${match.url}/update_profile`} className=\"link\">Update profile</Link>\r\n                        </div>}\r\n                    </div>\r\n                    <div className=\"user-profile-content\">\r\n                        <Route path={`${match.path}/general`} render={(props) => {\r\n                            return <GeneralUserInfo user={user} {...props} />\r\n                        }} />\r\n                        <Route path={`${match.path}/update_profile`} render={(props) => {\r\n                            return <UpdateProfile user={user} {...props} />\r\n                        }} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapGlobalStateToProps = (state) => {\r\n    return {\r\n        loggedInUser: state.userReducer.loggedInUser,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    logOut,\r\n    getUserById,\r\n    getBoardsByUserId\r\n}\r\n\r\n\r\nexport const UserProfile = connect(mapGlobalStateToProps, mapDispatchToProps)(_UserProfile);\r\n\r\n\r\n\r\n","import { HashRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport './assets/styles/main.scss'\r\nimport { Login } from \"./cmps/Login\";\r\nimport { SignUp } from \"./cmps/SignUp\";\r\nimport { BoardApp } from \"./pages/BoardApp\";\r\nimport { Home } from \"./pages/Home\";\r\nimport { UserProfile } from \"./pages/user/UserProfile\";\r\n\r\n\r\n\r\nexport function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n        <Route path=\"/board/:boardId\" component={BoardApp} />\r\n        <Route path=\"/user/:userId\" component={UserProfile} />\r\n        <Route path=\"/board\" component={BoardApp} />\r\n        <Route exact path=\"/login\" component={Login} />\r\n        <Route exact path=\"/signUp\" component={SignUp} />\r\n        <Route exact path=\"/\" component={Home} />\r\n        </Switch>\r\n      </Router>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n","import { userService } from \"../../services/userService\";\r\nconst initialState = {\r\n    users: [],\r\n    loggedInUser: userService.getLoggedinUser(),\r\n    msg: '',\r\n}\r\nexport function userReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_LOGGED_IN_USER':\r\n            return { ...state, loggedInUser: action.user }\r\n        case 'LOG_OUT':\r\n            return { ...state, loggedInUser: null }\r\n        case 'SET_MSG':\r\n            return { ...state, msg: action.msg }\r\n        case 'CLEAR_MSG':\r\n            return { ...state, msg: null }\r\n        default:\r\n            return state\r\n    }\r\n}","const initialState = {\r\n    boards: [],\r\n    board: null,\r\n    onDrag: false\r\n}\r\nexport function boardReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_BOARDS':\r\n            return { ...state, boards: action.boards }\r\n        case 'SET_CURR_BOARD':\r\n            return { ...state, board: action.board }\r\n        case 'UPDATE_BOARDS':\r\n            return {\r\n                ...state, boards: state.boards.map(board => {\r\n                    return board._id === action.board._id ? action.board : board\r\n                })\r\n            }\r\n        case 'ADD_BOARD':\r\n            return { ...state, boards: [...state.boards, action.board] }\r\n        case 'REMOVE_BOARD':\r\n            return { ...state, boards: state.boards.filter(board => board._id !== action.boardId) }\r\n        case 'ON_DRAG':\r\n            return { ...state, onDrag: true }\r\n        case 'ON_DRAG_END':\r\n            return { ...state, onDrag: false }\r\n        default:\r\n            return state\r\n    }\r\n}","import { applyMiddleware, combineReducers, compose, createStore } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport {userReducer} from './reducers/userReducer.js'\r\nimport {boardReducer} from './reducers/boardReducer.js'\r\nconst rootReducer = combineReducers({\r\n  boardReducer,\r\n  userReducer\r\n})\r\n\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\n// window.theStore = store;\r\n// store.subscribe(() => {\r\n//     console.log('State is:',store.getState())\r\n// })","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App.jsx';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store/store.js'\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n\r\n  <Provider store={store}>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}